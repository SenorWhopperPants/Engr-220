// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/26/2019 19:49:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    question57
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module question57_vlg_sample_tst(
	clock,
	sampler_tx
);
input  clock;
output sampler_tx;

reg sample;
time current_time;
always @(clock)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module question57_vlg_check_tst (
	out1,
	out2,
	out3,
	out4,
	sampler_rx
);
input  out1;
input  out2;
input  out3;
input  out4;
input sampler_rx;

reg  out1_expected;
reg  out2_expected;
reg  out3_expected;
reg  out4_expected;

reg  out1_prev;
reg  out2_prev;
reg  out3_prev;
reg  out4_prev;

reg  out1_expected_prev;
reg  out2_expected_prev;
reg  out3_expected_prev;
reg  out4_expected_prev;

reg  last_out1_exp;
reg  last_out2_exp;
reg  last_out3_exp;
reg  last_out4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	out1_prev = out1;
	out2_prev = out2;
	out3_prev = out3;
	out4_prev = out4;
end

// update expected /o prevs

always @(trigger)
begin
	out1_expected_prev = out1_expected;
	out2_expected_prev = out2_expected;
	out3_expected_prev = out3_expected;
	out4_expected_prev = out4_expected;
end



// expected out1
initial
begin
	out1_expected = 1'bX;
end 

// expected out2
initial
begin
	out2_expected = 1'bX;
end 

// expected out3
initial
begin
	out3_expected = 1'bX;
end 

// expected out4
initial
begin
	out4_expected = 1'bX;
end 
// generate trigger
always @(out1_expected or out1 or out2_expected or out2 or out3_expected or out3 or out4_expected or out4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out1 = %b | expected out2 = %b | expected out3 = %b | expected out4 = %b | ",out1_expected_prev,out2_expected_prev,out3_expected_prev,out4_expected_prev);
	$display("| real out1 = %b | real out2 = %b | real out3 = %b | real out4 = %b | ",out1_prev,out2_prev,out3_prev,out4_prev);
`endif
	if (
		( out1_expected_prev !== 1'bx ) && ( out1_prev !== out1_expected_prev )
		&& ((out1_expected_prev !== last_out1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out1_expected_prev);
		$display ("     Real value = %b", out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out1_exp = out1_expected_prev;
	end
	if (
		( out2_expected_prev !== 1'bx ) && ( out2_prev !== out2_expected_prev )
		&& ((out2_expected_prev !== last_out2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out2_exp = out2_expected_prev;
	end
	if (
		( out3_expected_prev !== 1'bx ) && ( out3_prev !== out3_expected_prev )
		&& ((out3_expected_prev !== last_out3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out3_expected_prev);
		$display ("     Real value = %b", out3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out3_exp = out3_expected_prev;
	end
	if (
		( out4_expected_prev !== 1'bx ) && ( out4_prev !== out4_expected_prev )
		&& ((out4_expected_prev !== last_out4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out4_expected_prev);
		$display ("     Real value = %b", out4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out4_exp = out4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module question57_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
// wires                                               
wire out1;
wire out2;
wire out3;
wire out4;

wire sampler;                             

// assign statements (if any)                          
question57 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.out4(out4)
);

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 

question57_vlg_sample_tst tb_sample (
	.clock(clock),
	.sampler_tx(sampler)
);

question57_vlg_check_tst tb_out(
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.out4(out4),
	.sampler_rx(sampler)
);
endmodule


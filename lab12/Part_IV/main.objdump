
H:/engr220/lab12/Part_IV/main.elf:     file format elf32-littlenios2
H:/engr220/lab12/Part_IV/main.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00001010 memsz 0x00001010 flags r-x
    LOAD off    0x00002030 vaddr 0x00001030 paddr 0x0000165c align 2**12
         filesz 0x0000062c memsz 0x0000062c flags rw-
    LOAD off    0x00002c88 vaddr 0x00001c88 paddr 0x00001c88 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000ea0  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  00001008  00001008  00002008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000062c  00001030  0000165c  00002030  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00001c88  00001c88  00002c88  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000398  00000000  00000000  00002688  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000007bc  00000000  00000000  00002a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005544  00000000  00000000  000031dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000019ff  00000000  00000000  00008720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004195  00000000  00000000  0000a11f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000005bc  00000000  00000000  0000e2b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000012db  00000000  00000000  0000e870  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000eef  00000000  00000000  0000fb4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00010a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f0  00000000  00000000  00010a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001228f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00012292  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00012295  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00012296  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00012297  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0001229b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0001229f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000122a3  2**0
                  CONTENTS, READONLY
 25 .jdi          00004412  00000000  00000000  000122ae  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00030dbc  00000000  00000000  000166c0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
00001008 l    d  .rodata	00000000 .rodata
00001030 l    d  .rwdata	00000000 .rwdata
00001c88 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001030 l     O .rwdata	0000002c LCD
0000105c l     O .rwdata	0000002c UART
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00000414 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000a10 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00001230 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000e3c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00000308 g     F .text	0000003c alt_main
00001ca4 g     O .bss	00000100 alt_irq
0000165c g       *ABS*	00000000 __flash_rwdata_start
00000514 g     F .text	00000010 alt_up_character_lcd_send_cmd
000007d4 g     F .text	00000080 alt_up_rs232_read_fd
00000000  w      *UND*	00000000 __errno
00000450 g     F .text	0000001c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00001ca0 g     O .bss	00000004 errno
00001c8c g     O .bss	00000004 alt_argv
00009630 g       *ABS*	00000000 _gp
000010b0 g     O .rwdata	00000180 alt_fd_list
00000a88 g     F .text	00000070 alt_find_dev
000004e4 g     F .text	00000020 alt_up_character_lcd_write_fd
00000788 g     F .text	0000004c alt_up_rs232_read_data
00000ce0 g     F .text	0000003c alt_icache_flush
00001640 g     O .rwdata	00000004 alt_max_fd
0000075c g     F .text	0000000c alt_up_rs232_check_parity
00000b18 g     F .text	000000bc alt_irq_register
00001658 g     O .rwdata	00000004 _global_impure_ptr
00001da4 g       *ABS*	00000000 __bss_end
00000c2c g     F .text	000000ac alt_tick
00000bf8 g     F .text	00000034 alt_alarm_stop
00001c94 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
00001088 g     O .rwdata	00000028 alt_dev_null
00000524 g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
00000a0c g     F .text	00000004 alt_dcache_flush_all
0000165c g       *ABS*	00000000 __ram_rwdata_end
00001638 g     O .rwdata	00000008 alt_dev_list
00001030 g       *ABS*	00000000 __ram_rodata_end
0000087c g     F .text	00000070 alt_up_rs232_write_fd
00001da4 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000003d0 g     F .text	00000044 alt_avalon_timer_sc_init
000004b8 g     F .text	0000002c alt_up_character_lcd_write
00000e40 g     F .text	000001b0 __call_exitprocs
00000168 g     F .text	0000003c _start
00001c98 g     O .bss	00000004 _alt_tick_rate
00001c9c g     O .bss	00000004 _alt_nticks
00000364 g     F .text	0000006c alt_sys_init
000005c8 g     F .text	00000090 alt_up_character_lcd_shift_display
00000854 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
0000055c g     F .text	0000006c alt_up_character_lcd_erase_pos
00001030 g       *ABS*	00000000 __ram_rwdata_start
00001008 g       *ABS*	00000000 __ram_rodata_start
00000d54 g     F .text	00000074 memcmp
00001da4 g       *ABS*	00000000 __alt_stack_base
000008ec g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00000a18 g     F .text	00000070 alt_dev_llist_insert
00001c88 g       *ABS*	00000000 __bss_start
000001a4 g     F .text	000000a0 main
00000000 g       *ABS*	00000000 __alt_mem_RAM
00001c90 g     O .bss	00000004 alt_envp
00000658 g     F .text	00000090 alt_up_character_lcd_shift_cursor
00001644 g     O .rwdata	00000004 alt_errno
0000073c g     F .text	00000020 alt_up_character_lcd_open_dev
00000504 g     F .text	00000010 alt_up_character_lcd_init
00001008 g       *ABS*	00000000 __flash_rodata_start
00000768 g     F .text	00000020 alt_up_rs232_open_dev
00000344 g     F .text	00000020 alt_irq_init
00000bd4 g     F .text	00000024 alt_release_fd
00000540 g     F .text	0000001c alt_up_character_lcd_cursor_off
00001654 g     O .rwdata	00000004 _impure_ptr
00001c88 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00001630 g     O .rwdata	00000008 alt_fs_list
00000908 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
00000864 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000165c g       *ABS*	00000000 _edata
00001da4 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00000cd8 g     F .text	00000008 altera_nios2_qsys_irq_init
00000d1c g     F .text	00000038 exit
00008000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000046c g     F .text	0000004c alt_up_character_lcd_string
00000ff0 g     F .text	00000014 _exit
00000dc8 g     F .text	00000074 strlen
00000af8 g     F .text	00000020 alt_icache_flush_all
000006e8 g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
00001648 g     O .rwdata	00000004 alt_priority_mask
0000164c g     O .rwdata	00000008 alt_alarm_list
00000920 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
00000930 g     F .text	000000dc close
00000244 g     F .text	000000c4 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000034 	movhi	r16,0
 100:	84072904 	addi	r16,r16,7332
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     174:	d6a58c14 	ori	gp,gp,38448
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	10872214 	ori	r2,r2,7304

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18c76914 	ori	r3,r3,7588

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	00002440 	call	244 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	00003080 	call	308 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <main>:

// include for UART device from the BSP
#include "altera_up_avalon_rs232.h"

int main( void )
{
     1a4:	defffc04 	addi	sp,sp,-16
     1a8:	dfc00315 	stw	ra,12(sp)
     1ac:	dc800215 	stw	r18,8(sp)
     1b0:	dc400115 	stw	r17,4(sp)
     1b4:	dc000015 	stw	r16,0(sp)
    // needed variables
    int err_code;
    alt_u8 * buf;
    alt_u8 * parity;
    // open the LCD device
    alt_up_character_lcd_dev * char_lcd_dev = alt_up_character_lcd_open_dev("/dev/LCD");
     1b8:	01000034 	movhi	r4,0
     1bc:	21040204 	addi	r4,r4,4104
     1c0:	000073c0 	call	73c <alt_up_character_lcd_open_dev>
     1c4:	1023883a 	mov	r17,r2
    
    // open the UART device
    alt_up_rs232_dev * char_rs232_dev = alt_up_rs232_open_dev("/dev/UART");
     1c8:	01000034 	movhi	r4,0
     1cc:	21040504 	addi	r4,r4,4116
     1d0:	00007680 	call	768 <alt_up_rs232_open_dev>
     1d4:	1021883a 	mov	r16,r2
    
    // if either device failed to open... return -1
    /* TODO */
    
    // initialize the LCD device
    alt_up_character_lcd_init(char_lcd_dev);
     1d8:	8809883a 	mov	r4,r17
     1dc:	00005040 	call	504 <alt_up_character_lcd_init>
     1e0:	04800644 	movi	r18,25
    //   read UART device
    //   if read was success...
    //     write character to LCD
    //     echo reversed-case character to Putty
    while (1) {
        err_code = alt_up_rs232_read_data(char_rs232_dev, buf, parity);
     1e4:	8009883a 	mov	r4,r16
     1e8:	f80b883a 	mov	r5,ra
     1ec:	800d883a 	mov	r6,r16
     1f0:	00007880 	call	788 <alt_up_rs232_read_data>
        if (!err_code) {
     1f4:	103ffb1e 	bne	r2,zero,1e4 <main+0x40>
            // // set cursor position to center on the first row
            // alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 2, 0);
            // write "Hello, I am" on the first line
            alt_up_character_lcd_string(char_lcd_dev, buf);
     1f8:	8809883a 	mov	r4,r17
     1fc:	f80b883a 	mov	r5,ra
     200:	000046c0 	call	46c <alt_up_character_lcd_string>

            // check for upper/lower case
            if (*buf >= 0x41 && *buf <= 0x5A) {
     204:	f8c00003 	ldbu	r3,0(ra)
     208:	18bfefc4 	addi	r2,r3,-65
     20c:	10803fcc 	andi	r2,r2,255
     210:	90800336 	bltu	r18,r2,220 <main+0x7c>
                // it's upper case so make it lower
                *buf += 32;
     214:	18800804 	addi	r2,r3,32
     218:	f8800005 	stb	r2,0(ra)
     21c:	00000506 	br	234 <main+0x90>
            }
            else if (*buf >= 0x61 && *buf <= 0x7A) {
     220:	18bfe7c4 	addi	r2,r3,-97
     224:	10803fcc 	andi	r2,r2,255
     228:	90800236 	bltu	r18,r2,234 <main+0x90>
                // it's lower case so make it upper
                *buf -= 32;
     22c:	18bff804 	addi	r2,r3,-32
     230:	f8800005 	stb	r2,0(ra)
            }
            // echo back the reverse-cased char to UART
            alt_up_rs232_write_data(char_rs232_dev, buf);
     234:	8009883a 	mov	r4,r16
     238:	f9403fcc 	andi	r5,ra,255
     23c:	00008640 	call	864 <alt_up_rs232_write_data>
     240:	003fe806 	br	1e4 <main+0x40>

00000244 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     244:	deffff04 	addi	sp,sp,-4
     248:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     24c:	01000034 	movhi	r4,0
     250:	21059704 	addi	r4,r4,5724
     254:	00c00034 	movhi	r3,0
     258:	18c40c04 	addi	r3,r3,4144

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     25c:	20c00926 	beq	r4,r3,284 <alt_load+0x40>
     260:	01800034 	movhi	r6,0
     264:	31859704 	addi	r6,r6,5724
  {
    while( to != end )
     268:	19800626 	beq	r3,r6,284 <alt_load+0x40>
     26c:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     270:	20800017 	ldw	r2,0(r4)
     274:	18800015 	stw	r2,0(r3)
     278:	1947883a 	add	r3,r3,r5
     27c:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     280:	30fffb1e 	bne	r6,r3,270 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     284:	01000034 	movhi	r4,0
     288:	21000804 	addi	r4,r4,32
     28c:	00c00034 	movhi	r3,0
     290:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     294:	20c00926 	beq	r4,r3,2bc <alt_load+0x78>
     298:	01800034 	movhi	r6,0
     29c:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
     2a0:	19800626 	beq	r3,r6,2bc <alt_load+0x78>
     2a4:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     2a8:	20800017 	ldw	r2,0(r4)
     2ac:	18800015 	stw	r2,0(r3)
     2b0:	1947883a 	add	r3,r3,r5
     2b4:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     2b8:	30fffb1e 	bne	r6,r3,2a8 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     2bc:	01000034 	movhi	r4,0
     2c0:	21040204 	addi	r4,r4,4104
     2c4:	00c00034 	movhi	r3,0
     2c8:	18c40204 	addi	r3,r3,4104

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     2cc:	20c00926 	beq	r4,r3,2f4 <alt_load+0xb0>
     2d0:	01800034 	movhi	r6,0
     2d4:	31840c04 	addi	r6,r6,4144
  {
    while( to != end )
     2d8:	19800626 	beq	r3,r6,2f4 <alt_load+0xb0>
     2dc:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     2e0:	20800017 	ldw	r2,0(r4)
     2e4:	18800015 	stw	r2,0(r3)
     2e8:	1947883a 	add	r3,r3,r5
     2ec:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     2f0:	30fffb1e 	bne	r6,r3,2e0 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     2f4:	0000a0c0 	call	a0c <alt_dcache_flush_all>
  alt_icache_flush_all();
     2f8:	0000af80 	call	af8 <alt_icache_flush_all>
}
     2fc:	dfc00017 	ldw	ra,0(sp)
     300:	dec00104 	addi	sp,sp,4
     304:	f800283a 	ret

00000308 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     308:	defffe04 	addi	sp,sp,-8
     30c:	dfc00115 	stw	ra,4(sp)
     310:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     314:	0009883a 	mov	r4,zero
     318:	00003440 	call	344 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     31c:	00003640 	call	364 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     320:	d1219617 	ldw	r4,-31144(gp)
     324:	d1619717 	ldw	r5,-31140(gp)
     328:	d1a19817 	ldw	r6,-31136(gp)
     32c:	00001a40 	call	1a4 <main>
     330:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     334:	01000044 	movi	r4,1
     338:	00009300 	call	930 <close>
  exit (result);
     33c:	8009883a 	mov	r4,r16
     340:	0000d1c0 	call	d1c <exit>

00000344 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     344:	deffff04 	addi	sp,sp,-4
     348:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
     34c:	0000cd80 	call	cd8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     350:	00800044 	movi	r2,1
     354:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     358:	dfc00017 	ldw	ra,0(sp)
     35c:	dec00104 	addi	sp,sp,4
     360:	f800283a 	ret

00000364 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     364:	defffd04 	addi	sp,sp,-12
     368:	dfc00215 	stw	ra,8(sp)
     36c:	dc400115 	stw	r17,4(sp)
     370:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
     374:	01201014 	movui	r4,32832
     378:	000b883a 	mov	r5,zero
     37c:	01800044 	movi	r6,1
     380:	01c0fa04 	movi	r7,1000
     384:	00003d00 	call	3d0 <alt_avalon_timer_sc_init>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD, LCD);
     388:	04000034 	movhi	r16,0
     38c:	84040c04 	addi	r16,r16,4144
     390:	8009883a 	mov	r4,r16
     394:	00005040 	call	504 <alt_up_character_lcd_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     398:	04400034 	movhi	r17,0
     39c:	8c458e04 	addi	r17,r17,5688
     3a0:	8009883a 	mov	r4,r16
     3a4:	880b883a 	mov	r5,r17
     3a8:	0000a180 	call	a18 <alt_dev_llist_insert>
     3ac:	01000034 	movhi	r4,0
     3b0:	21041704 	addi	r4,r4,4188
     3b4:	880b883a 	mov	r5,r17
     3b8:	0000a180 	call	a18 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( UART, UART);
}
     3bc:	dfc00217 	ldw	ra,8(sp)
     3c0:	dc400117 	ldw	r17,4(sp)
     3c4:	dc000017 	ldw	r16,0(sp)
     3c8:	dec00304 	addi	sp,sp,12
     3cc:	f800283a 	ret

000003d0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
     3d0:	deffff04 	addi	sp,sp,-4
     3d4:	dfc00015 	stw	ra,0(sp)
     3d8:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
     3dc:	00c00034 	movhi	r3,0
     3e0:	18c72604 	addi	r3,r3,7320
     3e4:	18800017 	ldw	r2,0(r3)
     3e8:	1000011e 	bne	r2,zero,3f0 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
     3ec:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
     3f0:	008001c4 	movi	r2,7
     3f4:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
     3f8:	3009883a 	mov	r4,r6
     3fc:	01800034 	movhi	r6,0
     400:	31810504 	addi	r6,r6,1044
     404:	0000b180 	call	b18 <alt_irq_register>
#endif  
}
     408:	dfc00017 	ldw	ra,0(sp)
     40c:	dec00104 	addi	sp,sp,4
     410:	f800283a 	ret

00000414 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
     414:	defffe04 	addi	sp,sp,-8
     418:	dfc00115 	stw	ra,4(sp)
     41c:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
     420:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
     424:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     428:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     42c:	00bfff84 	movi	r2,-2
     430:	8084703a 	and	r2,r16,r2
     434:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
     438:	0000c2c0 	call	c2c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     43c:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
     440:	dfc00117 	ldw	ra,4(sp)
     444:	dc000017 	ldw	r16,0(sp)
     448:	dec00204 	addi	sp,sp,8
     44c:	f800283a 	ret

00000450 <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
     450:	2800021e 	bne	r5,zero,45c <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
     454:	2005883a 	mov	r2,r4
     458:	00000106 	br	460 <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
     45c:	20801014 	ori	r2,r4,64
     460:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
     464:	10802014 	ori	r2,r2,128
     468:	f800283a 	ret

0000046c <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
     46c:	28c00003 	ldbu	r3,0(r5)
     470:	18803fcc 	andi	r2,r3,255
     474:	1080201c 	xori	r2,r2,128
     478:	10bfe004 	addi	r2,r2,-128
     47c:	10000d26 	beq	r2,zero,4b4 <alt_up_character_lcd_string+0x48>
     480:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
     484:	20800a17 	ldw	r2,40(r4)
     488:	1185883a 	add	r2,r2,r6
     48c:	18c03fcc 	andi	r3,r3,255
     490:	18c0201c 	xori	r3,r3,128
     494:	18ffe004 	addi	r3,r3,-128
     498:	10c00025 	stbio	r3,0(r2)
		++ptr;
     49c:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
     4a0:	28c00003 	ldbu	r3,0(r5)
     4a4:	18803fcc 	andi	r2,r3,255
     4a8:	1080201c 	xori	r2,r2,128
     4ac:	10bfe004 	addi	r2,r2,-128
     4b0:	103ff41e 	bne	r2,zero,484 <alt_up_character_lcd_string+0x18>
     4b4:	f800283a 	ret

000004b8 <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
     4b8:	30000926 	beq	r6,zero,4e0 <alt_up_character_lcd_write+0x28>
     4bc:	000f883a 	mov	r7,zero
     4c0:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
     4c4:	20800a17 	ldw	r2,40(r4)
     4c8:	1205883a 	add	r2,r2,r8
     4cc:	3947883a 	add	r3,r7,r5
     4d0:	18c00007 	ldb	r3,0(r3)
     4d4:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
     4d8:	3a0f883a 	add	r7,r7,r8
     4dc:	31fff91e 	bne	r6,r7,4c4 <alt_up_character_lcd_write+0xc>
     4e0:	f800283a 	ret

000004e4 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
     4e4:	deffff04 	addi	sp,sp,-4
     4e8:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
     4ec:	21000017 	ldw	r4,0(r4)
     4f0:	00004b80 	call	4b8 <alt_up_character_lcd_write>
	return 0;
}
     4f4:	0005883a 	mov	r2,zero
     4f8:	dfc00017 	ldw	ra,0(sp)
     4fc:	dec00104 	addi	sp,sp,4
     500:	f800283a 	ret

00000504 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
     504:	20c00a17 	ldw	r3,40(r4)
     508:	00800044 	movi	r2,1
     50c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
     510:	f800283a 	ret

00000514 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
     514:	20800a17 	ldw	r2,40(r4)
     518:	29403fcc 	andi	r5,r5,255
     51c:	11400025 	stbio	r5,0(r2)
}
     520:	f800283a 	ret

00000524 <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
     524:	deffff04 	addi	sp,sp,-4
     528:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
     52c:	014003c4 	movi	r5,15
     530:	00005140 	call	514 <alt_up_character_lcd_send_cmd>
}
     534:	dfc00017 	ldw	ra,0(sp)
     538:	dec00104 	addi	sp,sp,4
     53c:	f800283a 	ret

00000540 <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
     540:	deffff04 	addi	sp,sp,-4
     544:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
     548:	01400304 	movi	r5,12
     54c:	00005140 	call	514 <alt_up_character_lcd_send_cmd>
}
     550:	dfc00017 	ldw	ra,0(sp)
     554:	dec00104 	addi	sp,sp,4
     558:	f800283a 	ret

0000055c <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
     55c:	defffd04 	addi	sp,sp,-12
     560:	dfc00215 	stw	ra,8(sp)
     564:	dc400115 	stw	r17,4(sp)
     568:	dc000015 	stw	r16,0(sp)
     56c:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
     570:	008009c4 	movi	r2,39
     574:	11400e36 	bltu	r2,r5,5b0 <alt_up_character_lcd_erase_pos+0x54>
     578:	04400044 	movi	r17,1
     57c:	89800c36 	bltu	r17,r6,5b0 <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
     580:	2809883a 	mov	r4,r5
     584:	300b883a 	mov	r5,r6
     588:	00004500 	call	450 <get_DDRAM_addr>
     58c:	8009883a 	mov	r4,r16
     590:	11403fcc 	andi	r5,r2,255
     594:	00005140 	call	514 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
     598:	80800a17 	ldw	r2,40(r16)
     59c:	1445883a 	add	r2,r2,r17
     5a0:	00c00084 	movi	r3,2
     5a4:	10c00025 	stbio	r3,0(r2)
     5a8:	0005883a 	mov	r2,zero
     5ac:	00000106 	br	5b4 <alt_up_character_lcd_erase_pos+0x58>
	return 0;
     5b0:	00bfffc4 	movi	r2,-1
}
     5b4:	dfc00217 	ldw	ra,8(sp)
     5b8:	dc400117 	ldw	r17,4(sp)
     5bc:	dc000017 	ldw	r16,0(sp)
     5c0:	dec00304 	addi	sp,sp,12
     5c4:	f800283a 	ret

000005c8 <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
     5c8:	defffa04 	addi	sp,sp,-24
     5cc:	dfc00515 	stw	ra,20(sp)
     5d0:	dd000415 	stw	r20,16(sp)
     5d4:	dcc00315 	stw	r19,12(sp)
     5d8:	dc800215 	stw	r18,8(sp)
     5dc:	dc400115 	stw	r17,4(sp)
     5e0:	dc000015 	stw	r16,0(sp)
     5e4:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
     5e8:	28001326 	beq	r5,zero,638 <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
     5ec:	0140020e 	bge	zero,r5,5f8 <alt_up_character_lcd_shift_display+0x30>
     5f0:	05000704 	movi	r20,28
     5f4:	00000106 	br	5fc <alt_up_character_lcd_shift_display+0x34>
     5f8:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
     5fc:	2800010e 	bge	r5,zero,604 <alt_up_character_lcd_shift_display+0x3c>
     600:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
     604:	00bfffc4 	movi	r2,-1
     608:	28a1883a 	add	r16,r5,r2
     60c:	80c03fcc 	andi	r3,r16,255
     610:	10803fcc 	andi	r2,r2,255
     614:	18800826 	beq	r3,r2,638 <alt_up_character_lcd_shift_display+0x70>
     618:	04bfffc4 	movi	r18,-1
     61c:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
     620:	9809883a 	mov	r4,r19
     624:	a1403fcc 	andi	r5,r20,255
     628:	00005140 	call	514 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
     62c:	84a1883a 	add	r16,r16,r18
     630:	80803fcc 	andi	r2,r16,255
     634:	147ffa1e 	bne	r2,r17,620 <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
     638:	dfc00517 	ldw	ra,20(sp)
     63c:	dd000417 	ldw	r20,16(sp)
     640:	dcc00317 	ldw	r19,12(sp)
     644:	dc800217 	ldw	r18,8(sp)
     648:	dc400117 	ldw	r17,4(sp)
     64c:	dc000017 	ldw	r16,0(sp)
     650:	dec00604 	addi	sp,sp,24
     654:	f800283a 	ret

00000658 <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
     658:	defffa04 	addi	sp,sp,-24
     65c:	dfc00515 	stw	ra,20(sp)
     660:	dd000415 	stw	r20,16(sp)
     664:	dcc00315 	stw	r19,12(sp)
     668:	dc800215 	stw	r18,8(sp)
     66c:	dc400115 	stw	r17,4(sp)
     670:	dc000015 	stw	r16,0(sp)
     674:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
     678:	28001326 	beq	r5,zero,6c8 <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
     67c:	0140020e 	bge	zero,r5,688 <alt_up_character_lcd_shift_cursor+0x30>
     680:	05000504 	movi	r20,20
     684:	00000106 	br	68c <alt_up_character_lcd_shift_cursor+0x34>
     688:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
     68c:	2800010e 	bge	r5,zero,694 <alt_up_character_lcd_shift_cursor+0x3c>
     690:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
     694:	00bfffc4 	movi	r2,-1
     698:	28a1883a 	add	r16,r5,r2
     69c:	80c03fcc 	andi	r3,r16,255
     6a0:	10803fcc 	andi	r2,r2,255
     6a4:	18800826 	beq	r3,r2,6c8 <alt_up_character_lcd_shift_cursor+0x70>
     6a8:	04bfffc4 	movi	r18,-1
     6ac:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
     6b0:	9809883a 	mov	r4,r19
     6b4:	a1403fcc 	andi	r5,r20,255
     6b8:	00005140 	call	514 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
     6bc:	84a1883a 	add	r16,r16,r18
     6c0:	80803fcc 	andi	r2,r16,255
     6c4:	147ffa1e 	bne	r2,r17,6b0 <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
     6c8:	dfc00517 	ldw	ra,20(sp)
     6cc:	dd000417 	ldw	r20,16(sp)
     6d0:	dcc00317 	ldw	r19,12(sp)
     6d4:	dc800217 	ldw	r18,8(sp)
     6d8:	dc400117 	ldw	r17,4(sp)
     6dc:	dc000017 	ldw	r16,0(sp)
     6e0:	dec00604 	addi	sp,sp,24
     6e4:	f800283a 	ret

000006e8 <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
     6e8:	defffe04 	addi	sp,sp,-8
     6ec:	dfc00115 	stw	ra,4(sp)
     6f0:	dc000015 	stw	r16,0(sp)
     6f4:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
     6f8:	008009c4 	movi	r2,39
     6fc:	11400a36 	bltu	r2,r5,728 <alt_up_character_lcd_set_cursor_pos+0x40>
     700:	00800044 	movi	r2,1
     704:	11800836 	bltu	r2,r6,728 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
     708:	2809883a 	mov	r4,r5
     70c:	300b883a 	mov	r5,r6
     710:	00004500 	call	450 <get_DDRAM_addr>
     714:	8009883a 	mov	r4,r16
     718:	11403fcc 	andi	r5,r2,255
     71c:	00005140 	call	514 <alt_up_character_lcd_send_cmd>
     720:	0005883a 	mov	r2,zero
     724:	00000106 	br	72c <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
     728:	00bfffc4 	movi	r2,-1
}
     72c:	dfc00117 	ldw	ra,4(sp)
     730:	dc000017 	ldw	r16,0(sp)
     734:	dec00204 	addi	sp,sp,8
     738:	f800283a 	ret

0000073c <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
     73c:	deffff04 	addi	sp,sp,-4
     740:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
     744:	01400034 	movhi	r5,0
     748:	29458e04 	addi	r5,r5,5688
     74c:	0000a880 	call	a88 <alt_find_dev>

  return dev;
}
     750:	dfc00017 	ldw	ra,0(sp)
     754:	dec00104 	addi	sp,sp,4
     758:	f800283a 	ret

0000075c <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
     75c:	200495ba 	slli	r2,r4,22
}
     760:	1005d7fa 	srai	r2,r2,31
     764:	f800283a 	ret

00000768 <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
     768:	deffff04 	addi	sp,sp,-4
     76c:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
     770:	01400034 	movhi	r5,0
     774:	29458e04 	addi	r5,r5,5688
     778:	0000a880 	call	a88 <alt_find_dev>

  return dev;
}
     77c:	dfc00017 	ldw	ra,0(sp)
     780:	dec00104 	addi	sp,sp,4
     784:	f800283a 	ret

00000788 <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
     788:	defffd04 	addi	sp,sp,-12
     78c:	dfc00215 	stw	ra,8(sp)
     790:	dc400115 	stw	r17,4(sp)
     794:	dc000015 	stw	r16,0(sp)
     798:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
     79c:	20800a17 	ldw	r2,40(r4)
     7a0:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
     7a4:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
     7a8:	8009883a 	mov	r4,r16
     7ac:	000075c0 	call	75c <alt_up_rs232_check_parity>
     7b0:	88800005 	stb	r2,0(r17)
     7b4:	8420000c 	andi	r16,r16,32768
     7b8:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
     7bc:	80bfffc4 	addi	r2,r16,-1
     7c0:	dfc00217 	ldw	ra,8(sp)
     7c4:	dc400117 	ldw	r17,4(sp)
     7c8:	dc000017 	ldw	r16,0(sp)
     7cc:	dec00304 	addi	sp,sp,12
     7d0:	f800283a 	ret

000007d4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
     7d4:	defff904 	addi	sp,sp,-28
     7d8:	dfc00615 	stw	ra,24(sp)
     7dc:	dd000515 	stw	r20,20(sp)
     7e0:	dcc00415 	stw	r19,16(sp)
     7e4:	dc800315 	stw	r18,12(sp)
     7e8:	dc400215 	stw	r17,8(sp)
     7ec:	dc000115 	stw	r16,4(sp)
     7f0:	2821883a 	mov	r16,r5
     7f4:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
     7f8:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
     7fc:	3000021e 	bne	r6,zero,808 <alt_up_rs232_read_fd+0x34>
     800:	0025883a 	mov	r18,zero
     804:	00000a06 	br	830 <alt_up_rs232_read_fd+0x5c>
     808:	0025883a 	mov	r18,zero
     80c:	04400044 	movi	r17,1
     810:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
     814:	8461883a 	add	r16,r16,r17
     818:	9809883a 	mov	r4,r19
     81c:	d80d883a 	mov	r6,sp
     820:	00007880 	call	788 <alt_up_rs232_read_data>
     824:	1000021e 	bne	r2,zero,830 <alt_up_rs232_read_fd+0x5c>
			count++;
     828:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
     82c:	a4bff81e 	bne	r20,r18,810 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
     830:	9005883a 	mov	r2,r18
     834:	dfc00617 	ldw	ra,24(sp)
     838:	dd000517 	ldw	r20,20(sp)
     83c:	dcc00417 	ldw	r19,16(sp)
     840:	dc800317 	ldw	r18,12(sp)
     844:	dc400217 	ldw	r17,8(sp)
     848:	dc000117 	ldw	r16,4(sp)
     84c:	dec00704 	addi	sp,sp,28
     850:	f800283a 	ret

00000854 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
     854:	20800a17 	ldw	r2,40(r4)
     858:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
     85c:	1004d43a 	srli	r2,r2,16
     860:	f800283a 	ret

00000864 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
     864:	20800a17 	ldw	r2,40(r4)
     868:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
     86c:	29403fcc 	andi	r5,r5,255
     870:	11400035 	stwio	r5,0(r2)
	return 0;
}
     874:	0005883a 	mov	r2,zero
     878:	f800283a 	ret

0000087c <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
     87c:	defffb04 	addi	sp,sp,-20
     880:	dfc00415 	stw	ra,16(sp)
     884:	dcc00315 	stw	r19,12(sp)
     888:	dc800215 	stw	r18,8(sp)
     88c:	dc400115 	stw	r17,4(sp)
     890:	dc000015 	stw	r16,0(sp)
     894:	2827883a 	mov	r19,r5
     898:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
     89c:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
     8a0:	3000021e 	bne	r6,zero,8ac <alt_up_rs232_write_fd+0x30>
     8a4:	0021883a 	mov	r16,zero
     8a8:	00000806 	br	8cc <alt_up_rs232_write_fd+0x50>
     8ac:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
     8b0:	84c5883a 	add	r2,r16,r19
     8b4:	8809883a 	mov	r4,r17
     8b8:	11400003 	ldbu	r5,0(r2)
     8bc:	00008640 	call	864 <alt_up_rs232_write_data>
     8c0:	1000021e 	bne	r2,zero,8cc <alt_up_rs232_write_fd+0x50>
		{
			count++;
     8c4:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
     8c8:	943ff91e 	bne	r18,r16,8b0 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
     8cc:	8005883a 	mov	r2,r16
     8d0:	dfc00417 	ldw	ra,16(sp)
     8d4:	dcc00317 	ldw	r19,12(sp)
     8d8:	dc800217 	ldw	r18,8(sp)
     8dc:	dc400117 	ldw	r17,4(sp)
     8e0:	dc000017 	ldw	r16,0(sp)
     8e4:	dec00504 	addi	sp,sp,20
     8e8:	f800283a 	ret

000008ec <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
     8ec:	20800a17 	ldw	r2,40(r4)
     8f0:	10800104 	addi	r2,r2,4
     8f4:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
     8f8:	013fff84 	movi	r4,-2
     8fc:	1906703a 	and	r3,r3,r4
     900:	10c00035 	stwio	r3,0(r2)
}
     904:	f800283a 	ret

00000908 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
     908:	20c00a17 	ldw	r3,40(r4)
     90c:	18c00104 	addi	r3,r3,4
     910:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
     914:	10800054 	ori	r2,r2,1
     918:	18800035 	stwio	r2,0(r3)
}
     91c:	f800283a 	ret

00000920 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
     920:	20800a17 	ldw	r2,40(r4)
     924:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
     928:	10bfffcc 	andi	r2,r2,65535
     92c:	f800283a 	ret

00000930 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
     930:	defffd04 	addi	sp,sp,-12
     934:	dfc00215 	stw	ra,8(sp)
     938:	dc400115 	stw	r17,4(sp)
     93c:	dc000015 	stw	r16,0(sp)
     940:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
     944:	20001c16 	blt	r4,zero,9b8 <close+0x88>
     948:	20c00324 	muli	r3,r4,12
     94c:	00800034 	movhi	r2,0
     950:	10842c04 	addi	r2,r2,4272
     954:	1889883a 	add	r4,r3,r2

  if (fd)
     958:	20001726 	beq	r4,zero,9b8 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     95c:	20800017 	ldw	r2,0(r4)
     960:	10800417 	ldw	r2,16(r2)
     964:	10002126 	beq	r2,zero,9ec <close+0xbc>
     968:	103ee83a 	callr	r2
     96c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     970:	8009883a 	mov	r4,r16
     974:	0000bd40 	call	bd4 <alt_release_fd>
    if (rval < 0)
     978:	88000216 	blt	r17,zero,984 <close+0x54>
     97c:	0005883a 	mov	r2,zero
     980:	00001d06 	br	9f8 <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
     984:	00800034 	movhi	r2,0
     988:	10859104 	addi	r2,r2,5700
     98c:	10800017 	ldw	r2,0(r2)
     990:	1000031e 	bne	r2,zero,9a0 <close+0x70>
     994:	00c00034 	movhi	r3,0
     998:	18c72804 	addi	r3,r3,7328
     99c:	00000206 	br	9a8 <close+0x78>
     9a0:	103ee83a 	callr	r2
     9a4:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
     9a8:	0445c83a 	sub	r2,zero,r17
     9ac:	18800015 	stw	r2,0(r3)
     9b0:	00bfffc4 	movi	r2,-1
     9b4:	00001006 	br	9f8 <close+0xc8>
     9b8:	00800034 	movhi	r2,0
     9bc:	10859104 	addi	r2,r2,5700
     9c0:	10800017 	ldw	r2,0(r2)
     9c4:	1000031e 	bne	r2,zero,9d4 <close+0xa4>
     9c8:	00c00034 	movhi	r3,0
     9cc:	18c72804 	addi	r3,r3,7328
     9d0:	00000206 	br	9dc <close+0xac>
     9d4:	103ee83a 	callr	r2
     9d8:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
     9dc:	00801444 	movi	r2,81
     9e0:	18800015 	stw	r2,0(r3)
     9e4:	00bfffc4 	movi	r2,-1
     9e8:	00000306 	br	9f8 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     9ec:	8009883a 	mov	r4,r16
     9f0:	0000bd40 	call	bd4 <alt_release_fd>
     9f4:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
     9f8:	dfc00217 	ldw	ra,8(sp)
     9fc:	dc400117 	ldw	r17,4(sp)
     a00:	dc000017 	ldw	r16,0(sp)
     a04:	dec00304 	addi	sp,sp,12
     a08:	f800283a 	ret

00000a0c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     a0c:	f800283a 	ret

00000a10 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
     a10:	3005883a 	mov	r2,r6
     a14:	f800283a 	ret

00000a18 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
     a18:	deffff04 	addi	sp,sp,-4
     a1c:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
     a20:	20000226 	beq	r4,zero,a2c <alt_dev_llist_insert+0x14>
     a24:	20800217 	ldw	r2,8(r4)
     a28:	10000d1e 	bne	r2,zero,a60 <alt_dev_llist_insert+0x48>
     a2c:	00800034 	movhi	r2,0
     a30:	10859104 	addi	r2,r2,5700
     a34:	10800017 	ldw	r2,0(r2)
     a38:	1000031e 	bne	r2,zero,a48 <alt_dev_llist_insert+0x30>
     a3c:	00c00034 	movhi	r3,0
     a40:	18c72804 	addi	r3,r3,7328
     a44:	00000206 	br	a50 <alt_dev_llist_insert+0x38>
     a48:	103ee83a 	callr	r2
     a4c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
     a50:	00800584 	movi	r2,22
     a54:	18800015 	stw	r2,0(r3)
     a58:	00bffa84 	movi	r2,-22
     a5c:	00000706 	br	a7c <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
     a60:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
     a64:	28800017 	ldw	r2,0(r5)
     a68:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
     a6c:	28800017 	ldw	r2,0(r5)
     a70:	11000115 	stw	r4,4(r2)
  list->next           = entry;
     a74:	29000015 	stw	r4,0(r5)
     a78:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
     a7c:	dfc00017 	ldw	ra,0(sp)
     a80:	dec00104 	addi	sp,sp,4
     a84:	f800283a 	ret

00000a88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
     a88:	defffb04 	addi	sp,sp,-20
     a8c:	dfc00415 	stw	ra,16(sp)
     a90:	dcc00315 	stw	r19,12(sp)
     a94:	dc800215 	stw	r18,8(sp)
     a98:	dc400115 	stw	r17,4(sp)
     a9c:	dc000015 	stw	r16,0(sp)
     aa0:	2027883a 	mov	r19,r4
     aa4:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
     aa8:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
     aac:	0000dc80 	call	dc8 <strlen>
     ab0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
     ab4:	8c000726 	beq	r17,r16,ad4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
     ab8:	89000217 	ldw	r4,8(r17)
     abc:	980b883a 	mov	r5,r19
     ac0:	900d883a 	mov	r6,r18
     ac4:	0000d540 	call	d54 <memcmp>
     ac8:	10000326 	beq	r2,zero,ad8 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
     acc:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
     ad0:	847ff91e 	bne	r16,r17,ab8 <alt_find_dev+0x30>
     ad4:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
     ad8:	8805883a 	mov	r2,r17
     adc:	dfc00417 	ldw	ra,16(sp)
     ae0:	dcc00317 	ldw	r19,12(sp)
     ae4:	dc800217 	ldw	r18,8(sp)
     ae8:	dc400117 	ldw	r17,4(sp)
     aec:	dc000017 	ldw	r16,0(sp)
     af0:	dec00504 	addi	sp,sp,20
     af4:	f800283a 	ret

00000af8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
     af8:	deffff04 	addi	sp,sp,-4
     afc:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
     b00:	0009883a 	mov	r4,zero
     b04:	01440004 	movi	r5,4096
     b08:	0000ce00 	call	ce0 <alt_icache_flush>
#endif
}
     b0c:	dfc00017 	ldw	ra,0(sp)
     b10:	dec00104 	addi	sp,sp,4
     b14:	f800283a 	ret

00000b18 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
     b18:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
     b1c:	008007c4 	movi	r2,31
     b20:	1100022e 	bgeu	r2,r4,b2c <alt_irq_register+0x14>
     b24:	00bffa84 	movi	r2,-22
     b28:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     b2c:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     b30:	013fff84 	movi	r4,-2
     b34:	4104703a 	and	r2,r8,r4
     b38:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
     b3c:	380490fa 	slli	r2,r7,3
     b40:	00c00034 	movhi	r3,0
     b44:	18c72904 	addi	r3,r3,7332
     b48:	10c5883a 	add	r2,r2,r3
     b4c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
     b50:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
     b54:	30000e26 	beq	r6,zero,b90 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     b58:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     b5c:	2904703a 	and	r2,r5,r4
     b60:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
     b64:	00c00034 	movhi	r3,0
     b68:	18c72504 	addi	r3,r3,7316
     b6c:	19000017 	ldw	r4,0(r3)
     b70:	00800044 	movi	r2,1
     b74:	11c4983a 	sll	r2,r2,r7
     b78:	1104b03a 	or	r2,r2,r4
     b7c:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     b80:	18800017 	ldw	r2,0(r3)
     b84:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     b88:	2801703a 	wrctl	status,r5
     b8c:	00000e06 	br	bc8 <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     b90:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     b94:	00bfff84 	movi	r2,-2
     b98:	2884703a 	and	r2,r5,r2
     b9c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
     ba0:	00c00034 	movhi	r3,0
     ba4:	18c72504 	addi	r3,r3,7316
     ba8:	19000017 	ldw	r4,0(r3)
     bac:	00bfff84 	movi	r2,-2
     bb0:	11c4183a 	rol	r2,r2,r7
     bb4:	1104703a 	and	r2,r2,r4
     bb8:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     bbc:	18800017 	ldw	r2,0(r3)
     bc0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     bc4:	2801703a 	wrctl	status,r5
     bc8:	4001703a 	wrctl	status,r8
     bcc:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
     bd0:	f800283a 	ret

00000bd4 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
     bd4:	00800084 	movi	r2,2
     bd8:	1100060e 	bge	r2,r4,bf4 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
     bdc:	20800324 	muli	r2,r4,12
     be0:	00c00034 	movhi	r3,0
     be4:	18c42c04 	addi	r3,r3,4272
     be8:	10c5883a 	add	r2,r2,r3
     bec:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
     bf0:	10000015 	stw	zero,0(r2)
     bf4:	f800283a 	ret

00000bf8 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     bf8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     bfc:	00bfff84 	movi	r2,-2
     c00:	2884703a 	and	r2,r5,r2
     c04:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
     c08:	20c00017 	ldw	r3,0(r4)
     c0c:	20800117 	ldw	r2,4(r4)
     c10:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
     c14:	20800117 	ldw	r2,4(r4)
     c18:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
     c1c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
     c20:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     c24:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
     c28:	f800283a 	ret

00000c2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
     c2c:	defffd04 	addi	sp,sp,-12
     c30:	dfc00215 	stw	ra,8(sp)
     c34:	dc400115 	stw	r17,4(sp)
     c38:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
     c3c:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
     c40:	d0a19b17 	ldw	r2,-31124(gp)
     c44:	10800044 	addi	r2,r2,1
     c48:	d0a19b15 	stw	r2,-31124(gp)
     c4c:	00001b06 	br	cbc <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
     c50:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
     c54:	80800403 	ldbu	r2,16(r16)
     c58:	10000326 	beq	r2,zero,c68 <alt_tick+0x3c>
     c5c:	d0a19b17 	ldw	r2,-31124(gp)
     c60:	1000011e 	bne	r2,zero,c68 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
     c64:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
     c68:	d0e19b17 	ldw	r3,-31124(gp)
     c6c:	80800217 	ldw	r2,8(r16)
     c70:	18801136 	bltu	r3,r2,cb8 <alt_tick+0x8c>
     c74:	80800403 	ldbu	r2,16(r16)
     c78:	10000f1e 	bne	r2,zero,cb8 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
     c7c:	80800317 	ldw	r2,12(r16)
     c80:	81000517 	ldw	r4,20(r16)
     c84:	103ee83a 	callr	r2
     c88:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
     c8c:	1000031e 	bne	r2,zero,c9c <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
     c90:	8009883a 	mov	r4,r16
     c94:	0000bf80 	call	bf8 <alt_alarm_stop>
     c98:	00000706 	br	cb8 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
     c9c:	80800217 	ldw	r2,8(r16)
     ca0:	1885883a 	add	r2,r3,r2
     ca4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
     ca8:	d0e19b17 	ldw	r3,-31124(gp)
     cac:	10c0022e 	bgeu	r2,r3,cb8 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
     cb0:	00800044 	movi	r2,1
     cb4:	80800405 	stb	r2,16(r16)
     cb8:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
     cbc:	d0a00704 	addi	r2,gp,-32740
     cc0:	80bfe31e 	bne	r16,r2,c50 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
     cc4:	dfc00217 	ldw	ra,8(sp)
     cc8:	dc400117 	ldw	r17,4(sp)
     ccc:	dc000017 	ldw	r16,0(sp)
     cd0:	dec00304 	addi	sp,sp,12
     cd4:	f800283a 	ret

00000cd8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
     cd8:	000170fa 	wrctl	ienable,zero
}
     cdc:	f800283a 	ret

00000ce0 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
     ce0:	2007883a 	mov	r3,r4
     ce4:	00840004 	movi	r2,4096
     ce8:	1140012e 	bgeu	r2,r5,cf0 <alt_icache_flush+0x10>
     cec:	100b883a 	mov	r5,r2
     cf0:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
     cf4:	1940042e 	bgeu	r3,r5,d08 <alt_icache_flush+0x28>
     cf8:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
     cfc:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
     d00:	1887883a 	add	r3,r3,r2
     d04:	197ffd36 	bltu	r3,r5,cfc <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
     d08:	208007cc 	andi	r2,r4,31
     d0c:	10000126 	beq	r2,zero,d14 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
     d10:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
     d14:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
     d18:	f800283a 	ret

00000d1c <exit>:
     d1c:	defffe04 	addi	sp,sp,-8
     d20:	000b883a 	mov	r5,zero
     d24:	dc000015 	stw	r16,0(sp)
     d28:	dfc00115 	stw	ra,4(sp)
     d2c:	2021883a 	mov	r16,r4
     d30:	0000e400 	call	e40 <__call_exitprocs>
     d34:	00800034 	movhi	r2,0
     d38:	10859604 	addi	r2,r2,5720
     d3c:	11000017 	ldw	r4,0(r2)
     d40:	20800f17 	ldw	r2,60(r4)
     d44:	10000126 	beq	r2,zero,d4c <exit+0x30>
     d48:	103ee83a 	callr	r2
     d4c:	8009883a 	mov	r4,r16
     d50:	0000ff00 	call	ff0 <_exit>

00000d54 <memcmp>:
     d54:	00c000c4 	movi	r3,3
     d58:	1980032e 	bgeu	r3,r6,d68 <memcmp+0x14>
     d5c:	2144b03a 	or	r2,r4,r5
     d60:	10c4703a 	and	r2,r2,r3
     d64:	10000f26 	beq	r2,zero,da4 <memcmp+0x50>
     d68:	31ffffc4 	addi	r7,r6,-1
     d6c:	3000061e 	bne	r6,zero,d88 <memcmp+0x34>
     d70:	00000a06 	br	d9c <memcmp+0x48>
     d74:	39ffffc4 	addi	r7,r7,-1
     d78:	00bfffc4 	movi	r2,-1
     d7c:	21000044 	addi	r4,r4,1
     d80:	29400044 	addi	r5,r5,1
     d84:	38800526 	beq	r7,r2,d9c <memcmp+0x48>
     d88:	20c00003 	ldbu	r3,0(r4)
     d8c:	28800003 	ldbu	r2,0(r5)
     d90:	18bff826 	beq	r3,r2,d74 <memcmp+0x20>
     d94:	1885c83a 	sub	r2,r3,r2
     d98:	f800283a 	ret
     d9c:	0005883a 	mov	r2,zero
     da0:	f800283a 	ret
     da4:	180f883a 	mov	r7,r3
     da8:	20c00017 	ldw	r3,0(r4)
     dac:	28800017 	ldw	r2,0(r5)
     db0:	18bfed1e 	bne	r3,r2,d68 <memcmp+0x14>
     db4:	31bfff04 	addi	r6,r6,-4
     db8:	21000104 	addi	r4,r4,4
     dbc:	29400104 	addi	r5,r5,4
     dc0:	39bff936 	bltu	r7,r6,da8 <memcmp+0x54>
     dc4:	003fe806 	br	d68 <memcmp+0x14>

00000dc8 <strlen>:
     dc8:	208000cc 	andi	r2,r4,3
     dcc:	2011883a 	mov	r8,r4
     dd0:	1000161e 	bne	r2,zero,e2c <strlen+0x64>
     dd4:	20c00017 	ldw	r3,0(r4)
     dd8:	017fbff4 	movhi	r5,65279
     ddc:	297fbfc4 	addi	r5,r5,-257
     de0:	01e02074 	movhi	r7,32897
     de4:	39e02004 	addi	r7,r7,-32640
     de8:	1945883a 	add	r2,r3,r5
     dec:	11c4703a 	and	r2,r2,r7
     df0:	00c6303a 	nor	r3,zero,r3
     df4:	1886703a 	and	r3,r3,r2
     df8:	18000c1e 	bne	r3,zero,e2c <strlen+0x64>
     dfc:	280d883a 	mov	r6,r5
     e00:	380b883a 	mov	r5,r7
     e04:	21000104 	addi	r4,r4,4
     e08:	20800017 	ldw	r2,0(r4)
     e0c:	1187883a 	add	r3,r2,r6
     e10:	1946703a 	and	r3,r3,r5
     e14:	0084303a 	nor	r2,zero,r2
     e18:	10c4703a 	and	r2,r2,r3
     e1c:	103ff926 	beq	r2,zero,e04 <strlen+0x3c>
     e20:	20800007 	ldb	r2,0(r4)
     e24:	10000326 	beq	r2,zero,e34 <strlen+0x6c>
     e28:	21000044 	addi	r4,r4,1
     e2c:	20800007 	ldb	r2,0(r4)
     e30:	103ffd1e 	bne	r2,zero,e28 <strlen+0x60>
     e34:	2205c83a 	sub	r2,r4,r8
     e38:	f800283a 	ret

00000e3c <register_fini>:
     e3c:	f800283a 	ret

00000e40 <__call_exitprocs>:
     e40:	00800034 	movhi	r2,0
     e44:	10859604 	addi	r2,r2,5720
     e48:	10800017 	ldw	r2,0(r2)
     e4c:	defff304 	addi	sp,sp,-52
     e50:	df000b15 	stw	fp,44(sp)
     e54:	d8800115 	stw	r2,4(sp)
     e58:	00800034 	movhi	r2,0
     e5c:	10800004 	addi	r2,r2,0
     e60:	1005003a 	cmpeq	r2,r2,zero
     e64:	d8800215 	stw	r2,8(sp)
     e68:	d8800117 	ldw	r2,4(sp)
     e6c:	dd400815 	stw	r21,32(sp)
     e70:	dd000715 	stw	r20,28(sp)
     e74:	10805204 	addi	r2,r2,328
     e78:	dfc00c15 	stw	ra,48(sp)
     e7c:	ddc00a15 	stw	r23,40(sp)
     e80:	dd800915 	stw	r22,36(sp)
     e84:	dcc00615 	stw	r19,24(sp)
     e88:	dc800515 	stw	r18,20(sp)
     e8c:	dc400415 	stw	r17,16(sp)
     e90:	dc000315 	stw	r16,12(sp)
     e94:	282b883a 	mov	r21,r5
     e98:	2039883a 	mov	fp,r4
     e9c:	d8800015 	stw	r2,0(sp)
     ea0:	2829003a 	cmpeq	r20,r5,zero
     ea4:	d8800117 	ldw	r2,4(sp)
     ea8:	14405217 	ldw	r17,328(r2)
     eac:	88001026 	beq	r17,zero,ef0 <__call_exitprocs+0xb0>
     eb0:	ddc00017 	ldw	r23,0(sp)
     eb4:	88800117 	ldw	r2,4(r17)
     eb8:	8c802204 	addi	r18,r17,136
     ebc:	143fffc4 	addi	r16,r2,-1
     ec0:	80000916 	blt	r16,zero,ee8 <__call_exitprocs+0xa8>
     ec4:	05bfffc4 	movi	r22,-1
     ec8:	a000151e 	bne	r20,zero,f20 <__call_exitprocs+0xe0>
     ecc:	8409883a 	add	r4,r16,r16
     ed0:	2105883a 	add	r2,r4,r4
     ed4:	1485883a 	add	r2,r2,r18
     ed8:	10c02017 	ldw	r3,128(r2)
     edc:	a8c01126 	beq	r21,r3,f24 <__call_exitprocs+0xe4>
     ee0:	843fffc4 	addi	r16,r16,-1
     ee4:	85bff81e 	bne	r16,r22,ec8 <__call_exitprocs+0x88>
     ee8:	d8800217 	ldw	r2,8(sp)
     eec:	10003126 	beq	r2,zero,fb4 <__call_exitprocs+0x174>
     ef0:	dfc00c17 	ldw	ra,48(sp)
     ef4:	df000b17 	ldw	fp,44(sp)
     ef8:	ddc00a17 	ldw	r23,40(sp)
     efc:	dd800917 	ldw	r22,36(sp)
     f00:	dd400817 	ldw	r21,32(sp)
     f04:	dd000717 	ldw	r20,28(sp)
     f08:	dcc00617 	ldw	r19,24(sp)
     f0c:	dc800517 	ldw	r18,20(sp)
     f10:	dc400417 	ldw	r17,16(sp)
     f14:	dc000317 	ldw	r16,12(sp)
     f18:	dec00d04 	addi	sp,sp,52
     f1c:	f800283a 	ret
     f20:	8409883a 	add	r4,r16,r16
     f24:	88c00117 	ldw	r3,4(r17)
     f28:	2105883a 	add	r2,r4,r4
     f2c:	1445883a 	add	r2,r2,r17
     f30:	18ffffc4 	addi	r3,r3,-1
     f34:	11800217 	ldw	r6,8(r2)
     f38:	1c001526 	beq	r3,r16,f90 <__call_exitprocs+0x150>
     f3c:	10000215 	stw	zero,8(r2)
     f40:	303fe726 	beq	r6,zero,ee0 <__call_exitprocs+0xa0>
     f44:	00c00044 	movi	r3,1
     f48:	1c06983a 	sll	r3,r3,r16
     f4c:	90804017 	ldw	r2,256(r18)
     f50:	8cc00117 	ldw	r19,4(r17)
     f54:	1884703a 	and	r2,r3,r2
     f58:	10001426 	beq	r2,zero,fac <__call_exitprocs+0x16c>
     f5c:	90804117 	ldw	r2,260(r18)
     f60:	1884703a 	and	r2,r3,r2
     f64:	10000c1e 	bne	r2,zero,f98 <__call_exitprocs+0x158>
     f68:	2105883a 	add	r2,r4,r4
     f6c:	1485883a 	add	r2,r2,r18
     f70:	11400017 	ldw	r5,0(r2)
     f74:	e009883a 	mov	r4,fp
     f78:	303ee83a 	callr	r6
     f7c:	88800117 	ldw	r2,4(r17)
     f80:	98bfc81e 	bne	r19,r2,ea4 <__call_exitprocs+0x64>
     f84:	b8800017 	ldw	r2,0(r23)
     f88:	147fd526 	beq	r2,r17,ee0 <__call_exitprocs+0xa0>
     f8c:	003fc506 	br	ea4 <__call_exitprocs+0x64>
     f90:	8c000115 	stw	r16,4(r17)
     f94:	003fea06 	br	f40 <__call_exitprocs+0x100>
     f98:	2105883a 	add	r2,r4,r4
     f9c:	1485883a 	add	r2,r2,r18
     fa0:	11000017 	ldw	r4,0(r2)
     fa4:	303ee83a 	callr	r6
     fa8:	003ff406 	br	f7c <__call_exitprocs+0x13c>
     fac:	303ee83a 	callr	r6
     fb0:	003ff206 	br	f7c <__call_exitprocs+0x13c>
     fb4:	88800117 	ldw	r2,4(r17)
     fb8:	1000081e 	bne	r2,zero,fdc <__call_exitprocs+0x19c>
     fbc:	89000017 	ldw	r4,0(r17)
     fc0:	20000726 	beq	r4,zero,fe0 <__call_exitprocs+0x1a0>
     fc4:	b9000015 	stw	r4,0(r23)
     fc8:	8809883a 	mov	r4,r17
     fcc:	00000000 	call	0 <__alt_mem_RAM>
     fd0:	bc400017 	ldw	r17,0(r23)
     fd4:	883fb71e 	bne	r17,zero,eb4 <__call_exitprocs+0x74>
     fd8:	003fc506 	br	ef0 <__call_exitprocs+0xb0>
     fdc:	89000017 	ldw	r4,0(r17)
     fe0:	882f883a 	mov	r23,r17
     fe4:	2023883a 	mov	r17,r4
     fe8:	883fb21e 	bne	r17,zero,eb4 <__call_exitprocs+0x74>
     fec:	003fc006 	br	ef0 <__call_exitprocs+0xb0>

00000ff0 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
     ff0:	20000226 	beq	r4,zero,ffc <_exit+0xc>
    ALT_SIM_FAIL();
     ff4:	002af070 	cmpltui	zero,zero,43969
     ff8:	00000106 	br	1000 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
     ffc:	002af0b0 	cmpltui	zero,zero,43970
    1000:	003fff06 	br	1000 <_exit+0x10>
    1004:	00000e3c 	xorhi	zero,zero,56


H:/engr220/lab12/main.elf:     file format elf32-littlenios2
H:/engr220/lab12/main.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00001034 memsz 0x00001034 flags r-x
    LOAD off    0x00002054 vaddr 0x00001054 paddr 0x00001680 align 2**12
         filesz 0x0000062c memsz 0x0000062c flags rw-
    LOAD off    0x00002cac vaddr 0x00001cac paddr 0x00001cac align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000ec4  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  0000102c  0000102c  0000202c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000062c  00001054  00001680  00002054  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00001cac  00001cac  00002cac  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000398  00000000  00000000  000026a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000007bc  00000000  00000000  00002a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000554d  00000000  00000000  000031fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a02  00000000  00000000  00008749  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000041b4  00000000  00000000  0000a14b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000005bc  00000000  00000000  0000e300  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000012d2  00000000  00000000  0000e8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e7f  00000000  00000000  0000fb8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00010a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f0  00000000  00000000  00010a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001225f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00012262  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00012265  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00012266  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00012267  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0001226b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0001226f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00012273  2**0
                  CONTENTS, READONLY
 25 .jdi          00004412  00000000  00000000  0001227e  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00030dbc  00000000  00000000  00016690  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
0000102c l    d  .rodata	00000000 .rodata
00001054 l    d  .rwdata	00000000 .rwdata
00001cac l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001054 l     O .rwdata	0000002c LCD
00001080 l     O .rwdata	0000002c UART
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00000438 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000a34 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00001254 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000e60 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000032c g     F .text	0000003c alt_main
00001cc8 g     O .bss	00000100 alt_irq
00001680 g       *ABS*	00000000 __flash_rwdata_start
00000538 g     F .text	00000010 alt_up_character_lcd_send_cmd
000007f8 g     F .text	00000080 alt_up_rs232_read_fd
00000000  w      *UND*	00000000 __errno
00000474 g     F .text	0000001c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00001cc4 g     O .bss	00000004 errno
00001cb0 g     O .bss	00000004 alt_argv
00009654 g       *ABS*	00000000 _gp
000010d4 g     O .rwdata	00000180 alt_fd_list
00000aac g     F .text	00000070 alt_find_dev
00000508 g     F .text	00000020 alt_up_character_lcd_write_fd
000007ac g     F .text	0000004c alt_up_rs232_read_data
00000d04 g     F .text	0000003c alt_icache_flush
00001664 g     O .rwdata	00000004 alt_max_fd
00000780 g     F .text	0000000c alt_up_rs232_check_parity
00000b3c g     F .text	000000bc alt_irq_register
0000167c g     O .rwdata	00000004 _global_impure_ptr
00001dc8 g       *ABS*	00000000 __bss_end
00000c50 g     F .text	000000ac alt_tick
00000c1c g     F .text	00000034 alt_alarm_stop
00001cb8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
000010ac g     O .rwdata	00000028 alt_dev_null
00000548 g     F .text	0000001c alt_up_character_lcd_cursor_blink_on
00000a30 g     F .text	00000004 alt_dcache_flush_all
00001680 g       *ABS*	00000000 __ram_rwdata_end
0000165c g     O .rwdata	00000008 alt_dev_list
00001054 g       *ABS*	00000000 __ram_rodata_end
000008a0 g     F .text	00000070 alt_up_rs232_write_fd
00001dc8 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000003f4 g     F .text	00000044 alt_avalon_timer_sc_init
000004dc g     F .text	0000002c alt_up_character_lcd_write
00000e64 g     F .text	000001b0 __call_exitprocs
00000168 g     F .text	0000003c _start
00001cbc g     O .bss	00000004 _alt_tick_rate
00001cc0 g     O .bss	00000004 _alt_nticks
00000388 g     F .text	0000006c alt_sys_init
000005ec g     F .text	00000090 alt_up_character_lcd_shift_display
00000878 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00000580 g     F .text	0000006c alt_up_character_lcd_erase_pos
00001054 g       *ABS*	00000000 __ram_rwdata_start
0000102c g       *ABS*	00000000 __ram_rodata_start
00000d78 g     F .text	00000074 memcmp
00001dc8 g       *ABS*	00000000 __alt_stack_base
00000910 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00000a3c g     F .text	00000070 alt_dev_llist_insert
00001cac g       *ABS*	00000000 __bss_start
000001a4 g     F .text	000000c4 main
00000000 g       *ABS*	00000000 __alt_mem_RAM
00001cb4 g     O .bss	00000004 alt_envp
0000067c g     F .text	00000090 alt_up_character_lcd_shift_cursor
00001668 g     O .rwdata	00000004 alt_errno
00000760 g     F .text	00000020 alt_up_character_lcd_open_dev
00000528 g     F .text	00000010 alt_up_character_lcd_init
0000102c g       *ABS*	00000000 __flash_rodata_start
0000078c g     F .text	00000020 alt_up_rs232_open_dev
00000368 g     F .text	00000020 alt_irq_init
00000bf8 g     F .text	00000024 alt_release_fd
00000564 g     F .text	0000001c alt_up_character_lcd_cursor_off
00001678 g     O .rwdata	00000004 _impure_ptr
00001cac g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00001654 g     O .rwdata	00000008 alt_fs_list
0000092c g     F .text	00000018 alt_up_rs232_enable_read_interrupt
00000888 g     F .text	00000018 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001680 g       *ABS*	00000000 _edata
00001dc8 g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00000cfc g     F .text	00000008 altera_nios2_qsys_irq_init
00000d40 g     F .text	00000038 exit
00008000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000490 g     F .text	0000004c alt_up_character_lcd_string
00001014 g     F .text	00000014 _exit
00000dec g     F .text	00000074 strlen
00000b1c g     F .text	00000020 alt_icache_flush_all
0000070c g     F .text	00000054 alt_up_character_lcd_set_cursor_pos
0000166c g     O .rwdata	00000004 alt_priority_mask
00001670 g     O .rwdata	00000008 alt_alarm_list
00000944 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
00000954 g     F .text	000000dc close
00000268 g     F .text	000000c4 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000034 	movhi	r16,0
 100:	84073204 	addi	r16,r16,7368
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	000b883a 	mov	r5,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 114:	280490fa 	slli	r2,r5,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	000b883a 	mov	r5,zero
 140:	1809883a 	mov	r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	290b883a 	add	r5,r5,r4
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     174:	d6a59514 	ori	gp,gp,38484
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	10872b14 	ori	r2,r2,7340

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18c77214 	ori	r3,r3,7624

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	00002680 	call	268 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	000032c0 	call	32c <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <main>:

// include for UART device from the BSP
#include "altera_up_avalon_rs232.h"

int main( void )
{
     1a4:	defffb04 	addi	sp,sp,-20
     1a8:	dfc00415 	stw	ra,16(sp)
     1ac:	dc800315 	stw	r18,12(sp)
     1b0:	dc400215 	stw	r17,8(sp)
     1b4:	dc000115 	stw	r16,4(sp)
    alt_u8 buf;
    alt_u8 parity;
    char message[2];

    // open the LCD device
    alt_up_character_lcd_dev * char_lcd_dev = alt_up_character_lcd_open_dev("/dev/LCD");
     1b8:	01000034 	movhi	r4,0
     1bc:	21040b04 	addi	r4,r4,4140
     1c0:	00007600 	call	760 <alt_up_character_lcd_open_dev>
     1c4:	1021883a 	mov	r16,r2
    
    // open the UART device
    alt_up_rs232_dev * char_rs232_dev = alt_up_rs232_open_dev("/dev/UART");
     1c8:	01000034 	movhi	r4,0
     1cc:	21040e04 	addi	r4,r4,4152
     1d0:	000078c0 	call	78c <alt_up_rs232_open_dev>
     1d4:	1023883a 	mov	r17,r2
    
    // if either device failed to open... return -1
    /* TODO */
    
    // initialize the LCD device
    alt_up_character_lcd_init(char_lcd_dev);
     1d8:	8009883a 	mov	r4,r16
     1dc:	00005280 	call	528 <alt_up_character_lcd_init>

    alt_up_character_lcd_cursor_blink_on(char_lcd_dev);
     1e0:	8009883a 	mov	r4,r16
     1e4:	00005480 	call	548 <alt_up_character_lcd_cursor_blink_on>
     1e8:	04800644 	movi	r18,25
    //   read UART device
    //   if read was success...
    //     write character to LCD
    //     echo reversed-case character to Putty
    while (1) {
        message[1] = '\0';
     1ec:	d80000c5 	stb	zero,3(sp)
        err_code = alt_up_rs232_read_data(char_rs232_dev, &buf, &parity);
     1f0:	8809883a 	mov	r4,r17
     1f4:	d80b883a 	mov	r5,sp
     1f8:	d9800044 	addi	r6,sp,1
     1fc:	00007ac0 	call	7ac <alt_up_rs232_read_data>
        if (err_code == 0) {
     200:	103ffa1e 	bne	r2,zero,1ec <main+0x48>
            // set cursor position to center on the first row
            //alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 2, 0);
            // write "Hello, I am" on the first line

            message[0] = buf;
     204:	d8800003 	ldbu	r2,0(sp)
     208:	d8800085 	stb	r2,2(sp)
            alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
     20c:	8009883a 	mov	r4,r16
     210:	000b883a 	mov	r5,zero
     214:	000d883a 	mov	r6,zero
     218:	000070c0 	call	70c <alt_up_character_lcd_set_cursor_pos>
            alt_up_character_lcd_string(char_lcd_dev, message);
     21c:	8009883a 	mov	r4,r16
     220:	d9400084 	addi	r5,sp,2
     224:	00004900 	call	490 <alt_up_character_lcd_string>
            // check for upper/lower case
            if (buf >= 0x41 && buf <= 0x5A) {
     228:	d8c00003 	ldbu	r3,0(sp)
     22c:	18bfefc4 	addi	r2,r3,-65
     230:	10803fcc 	andi	r2,r2,255
     234:	90800336 	bltu	r18,r2,244 <main+0xa0>
                // it's upper case so make it lower
                buf += 32;
     238:	18800804 	addi	r2,r3,32
     23c:	d8800005 	stb	r2,0(sp)
     240:	00000506 	br	258 <main+0xb4>
                // alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
                // alt_up_character_lcd_string(char_lcd_dev, buf);
            }
            else if (buf >= 0x61 && buf <= 0x7A) {
     244:	18bfe7c4 	addi	r2,r3,-97
     248:	10803fcc 	andi	r2,r2,255
     24c:	90800236 	bltu	r18,r2,258 <main+0xb4>
                // it's lower case so make it upper
                buf -= 32;
     250:	18bff804 	addi	r2,r3,-32
     254:	d8800005 	stb	r2,0(sp)
                // alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
                // alt_up_character_lcd_string(char_lcd_dev, buf);
            }
            // echo back the reverse-cased char to UART
            alt_up_rs232_write_data(char_rs232_dev, buf);
     258:	8809883a 	mov	r4,r17
     25c:	d9400003 	ldbu	r5,0(sp)
     260:	00008880 	call	888 <alt_up_rs232_write_data>
     264:	003fe106 	br	1ec <main+0x48>

00000268 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     268:	deffff04 	addi	sp,sp,-4
     26c:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     270:	01000034 	movhi	r4,0
     274:	2105a004 	addi	r4,r4,5760
     278:	00c00034 	movhi	r3,0
     27c:	18c41504 	addi	r3,r3,4180

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     280:	20c00926 	beq	r4,r3,2a8 <alt_load+0x40>
     284:	01800034 	movhi	r6,0
     288:	3185a004 	addi	r6,r6,5760
  {
    while( to != end )
     28c:	19800626 	beq	r3,r6,2a8 <alt_load+0x40>
     290:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     294:	20800017 	ldw	r2,0(r4)
     298:	18800015 	stw	r2,0(r3)
     29c:	1947883a 	add	r3,r3,r5
     2a0:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     2a4:	30fffb1e 	bne	r6,r3,294 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     2a8:	01000034 	movhi	r4,0
     2ac:	21000804 	addi	r4,r4,32
     2b0:	00c00034 	movhi	r3,0
     2b4:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     2b8:	20c00926 	beq	r4,r3,2e0 <alt_load+0x78>
     2bc:	01800034 	movhi	r6,0
     2c0:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
     2c4:	19800626 	beq	r3,r6,2e0 <alt_load+0x78>
     2c8:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     2cc:	20800017 	ldw	r2,0(r4)
     2d0:	18800015 	stw	r2,0(r3)
     2d4:	1947883a 	add	r3,r3,r5
     2d8:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     2dc:	30fffb1e 	bne	r6,r3,2cc <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     2e0:	01000034 	movhi	r4,0
     2e4:	21040b04 	addi	r4,r4,4140
     2e8:	00c00034 	movhi	r3,0
     2ec:	18c40b04 	addi	r3,r3,4140

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     2f0:	20c00926 	beq	r4,r3,318 <alt_load+0xb0>
     2f4:	01800034 	movhi	r6,0
     2f8:	31841504 	addi	r6,r6,4180
  {
    while( to != end )
     2fc:	19800626 	beq	r3,r6,318 <alt_load+0xb0>
     300:	01400104 	movi	r5,4
    {
      *to++ = *from++;
     304:	20800017 	ldw	r2,0(r4)
     308:	18800015 	stw	r2,0(r3)
     30c:	1947883a 	add	r3,r3,r5
     310:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     314:	30fffb1e 	bne	r6,r3,304 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     318:	0000a300 	call	a30 <alt_dcache_flush_all>
  alt_icache_flush_all();
     31c:	0000b1c0 	call	b1c <alt_icache_flush_all>
}
     320:	dfc00017 	ldw	ra,0(sp)
     324:	dec00104 	addi	sp,sp,4
     328:	f800283a 	ret

0000032c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     32c:	defffe04 	addi	sp,sp,-8
     330:	dfc00115 	stw	ra,4(sp)
     334:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     338:	0009883a 	mov	r4,zero
     33c:	00003680 	call	368 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     340:	00003880 	call	388 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     344:	d1219617 	ldw	r4,-31144(gp)
     348:	d1619717 	ldw	r5,-31140(gp)
     34c:	d1a19817 	ldw	r6,-31136(gp)
     350:	00001a40 	call	1a4 <main>
     354:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     358:	01000044 	movi	r4,1
     35c:	00009540 	call	954 <close>
  exit (result);
     360:	8009883a 	mov	r4,r16
     364:	0000d400 	call	d40 <exit>

00000368 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     368:	deffff04 	addi	sp,sp,-4
     36c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
     370:	0000cfc0 	call	cfc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     374:	00800044 	movi	r2,1
     378:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     37c:	dfc00017 	ldw	ra,0(sp)
     380:	dec00104 	addi	sp,sp,4
     384:	f800283a 	ret

00000388 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     388:	defffd04 	addi	sp,sp,-12
     38c:	dfc00215 	stw	ra,8(sp)
     390:	dc400115 	stw	r17,4(sp)
     394:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
     398:	01201014 	movui	r4,32832
     39c:	000b883a 	mov	r5,zero
     3a0:	01800044 	movi	r6,1
     3a4:	01c0fa04 	movi	r7,1000
     3a8:	00003f40 	call	3f4 <alt_avalon_timer_sc_init>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD, LCD);
     3ac:	04000034 	movhi	r16,0
     3b0:	84041504 	addi	r16,r16,4180
     3b4:	8009883a 	mov	r4,r16
     3b8:	00005280 	call	528 <alt_up_character_lcd_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     3bc:	04400034 	movhi	r17,0
     3c0:	8c459704 	addi	r17,r17,5724
     3c4:	8009883a 	mov	r4,r16
     3c8:	880b883a 	mov	r5,r17
     3cc:	0000a3c0 	call	a3c <alt_dev_llist_insert>
     3d0:	01000034 	movhi	r4,0
     3d4:	21042004 	addi	r4,r4,4224
     3d8:	880b883a 	mov	r5,r17
     3dc:	0000a3c0 	call	a3c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( UART, UART);
}
     3e0:	dfc00217 	ldw	ra,8(sp)
     3e4:	dc400117 	ldw	r17,4(sp)
     3e8:	dc000017 	ldw	r16,0(sp)
     3ec:	dec00304 	addi	sp,sp,12
     3f0:	f800283a 	ret

000003f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
     3f4:	deffff04 	addi	sp,sp,-4
     3f8:	dfc00015 	stw	ra,0(sp)
     3fc:	200b883a 	mov	r5,r4
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
     400:	00c00034 	movhi	r3,0
     404:	18c72f04 	addi	r3,r3,7356
     408:	18800017 	ldw	r2,0(r3)
     40c:	1000011e 	bne	r2,zero,414 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
     410:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
     414:	008001c4 	movi	r2,7
     418:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
     41c:	3009883a 	mov	r4,r6
     420:	01800034 	movhi	r6,0
     424:	31810e04 	addi	r6,r6,1080
     428:	0000b3c0 	call	b3c <alt_irq_register>
#endif  
}
     42c:	dfc00017 	ldw	ra,0(sp)
     430:	dec00104 	addi	sp,sp,4
     434:	f800283a 	ret

00000438 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
     438:	defffe04 	addi	sp,sp,-8
     43c:	dfc00115 	stw	ra,4(sp)
     440:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
     444:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
     448:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     44c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     450:	00bfff84 	movi	r2,-2
     454:	8084703a 	and	r2,r16,r2
     458:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
     45c:	0000c500 	call	c50 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     460:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
     464:	dfc00117 	ldw	ra,4(sp)
     468:	dc000017 	ldw	r16,0(sp)
     46c:	dec00204 	addi	sp,sp,8
     470:	f800283a 	ret

00000474 <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
     474:	2800021e 	bne	r5,zero,480 <get_DDRAM_addr+0xc>
	{
		addr |= x_pos;
     478:	2005883a 	mov	r2,r4
     47c:	00000106 	br	484 <get_DDRAM_addr+0x10>
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
     480:	20801014 	ori	r2,r4,64
     484:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
     488:	10802014 	ori	r2,r2,128
     48c:	f800283a 	ret

00000490 <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
     490:	28c00003 	ldbu	r3,0(r5)
     494:	18803fcc 	andi	r2,r3,255
     498:	1080201c 	xori	r2,r2,128
     49c:	10bfe004 	addi	r2,r2,-128
     4a0:	10000d26 	beq	r2,zero,4d8 <alt_up_character_lcd_string+0x48>
     4a4:	01800044 	movi	r6,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
     4a8:	20800a17 	ldw	r2,40(r4)
     4ac:	1185883a 	add	r2,r2,r6
     4b0:	18c03fcc 	andi	r3,r3,255
     4b4:	18c0201c 	xori	r3,r3,128
     4b8:	18ffe004 	addi	r3,r3,-128
     4bc:	10c00025 	stbio	r3,0(r2)
		++ptr;
     4c0:	298b883a 	add	r5,r5,r6
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
     4c4:	28c00003 	ldbu	r3,0(r5)
     4c8:	18803fcc 	andi	r2,r3,255
     4cc:	1080201c 	xori	r2,r2,128
     4d0:	10bfe004 	addi	r2,r2,-128
     4d4:	103ff41e 	bne	r2,zero,4a8 <alt_up_character_lcd_string+0x18>
     4d8:	f800283a 	ret

000004dc <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
     4dc:	30000926 	beq	r6,zero,504 <alt_up_character_lcd_write+0x28>
     4e0:	000f883a 	mov	r7,zero
     4e4:	02000044 	movi	r8,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
     4e8:	20800a17 	ldw	r2,40(r4)
     4ec:	1205883a 	add	r2,r2,r8
     4f0:	3947883a 	add	r3,r7,r5
     4f4:	18c00007 	ldb	r3,0(r3)
     4f8:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
     4fc:	3a0f883a 	add	r7,r7,r8
     500:	31fff91e 	bne	r6,r7,4e8 <alt_up_character_lcd_write+0xc>
     504:	f800283a 	ret

00000508 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
     508:	deffff04 	addi	sp,sp,-4
     50c:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
     510:	21000017 	ldw	r4,0(r4)
     514:	00004dc0 	call	4dc <alt_up_character_lcd_write>
	return 0;
}
     518:	0005883a 	mov	r2,zero
     51c:	dfc00017 	ldw	ra,0(sp)
     520:	dec00104 	addi	sp,sp,4
     524:	f800283a 	ret

00000528 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
     528:	20c00a17 	ldw	r3,40(r4)
     52c:	00800044 	movi	r2,1
     530:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
     534:	f800283a 	ret

00000538 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
     538:	20800a17 	ldw	r2,40(r4)
     53c:	29403fcc 	andi	r5,r5,255
     540:	11400025 	stbio	r5,0(r2)
}
     544:	f800283a 	ret

00000548 <alt_up_character_lcd_cursor_blink_on>:
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
     548:	deffff04 	addi	sp,sp,-4
     54c:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
     550:	014003c4 	movi	r5,15
     554:	00005380 	call	538 <alt_up_character_lcd_send_cmd>
}
     558:	dfc00017 	ldw	ra,0(sp)
     55c:	dec00104 	addi	sp,sp,4
     560:	f800283a 	ret

00000564 <alt_up_character_lcd_cursor_off>:
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
     564:	deffff04 	addi	sp,sp,-4
     568:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
     56c:	01400304 	movi	r5,12
     570:	00005380 	call	538 <alt_up_character_lcd_send_cmd>
}
     574:	dfc00017 	ldw	ra,0(sp)
     578:	dec00104 	addi	sp,sp,4
     57c:	f800283a 	ret

00000580 <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
     580:	defffd04 	addi	sp,sp,-12
     584:	dfc00215 	stw	ra,8(sp)
     588:	dc400115 	stw	r17,4(sp)
     58c:	dc000015 	stw	r16,0(sp)
     590:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
     594:	008009c4 	movi	r2,39
     598:	11400e36 	bltu	r2,r5,5d4 <alt_up_character_lcd_erase_pos+0x54>
     59c:	04400044 	movi	r17,1
     5a0:	89800c36 	bltu	r17,r6,5d4 <alt_up_character_lcd_erase_pos+0x54>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
     5a4:	2809883a 	mov	r4,r5
     5a8:	300b883a 	mov	r5,r6
     5ac:	00004740 	call	474 <get_DDRAM_addr>
     5b0:	8009883a 	mov	r4,r16
     5b4:	11403fcc 	andi	r5,r2,255
     5b8:	00005380 	call	538 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
     5bc:	80800a17 	ldw	r2,40(r16)
     5c0:	1445883a 	add	r2,r2,r17
     5c4:	00c00084 	movi	r3,2
     5c8:	10c00025 	stbio	r3,0(r2)
     5cc:	0005883a 	mov	r2,zero
     5d0:	00000106 	br	5d8 <alt_up_character_lcd_erase_pos+0x58>
	return 0;
     5d4:	00bfffc4 	movi	r2,-1
}
     5d8:	dfc00217 	ldw	ra,8(sp)
     5dc:	dc400117 	ldw	r17,4(sp)
     5e0:	dc000017 	ldw	r16,0(sp)
     5e4:	dec00304 	addi	sp,sp,12
     5e8:	f800283a 	ret

000005ec <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
     5ec:	defffa04 	addi	sp,sp,-24
     5f0:	dfc00515 	stw	ra,20(sp)
     5f4:	dd000415 	stw	r20,16(sp)
     5f8:	dcc00315 	stw	r19,12(sp)
     5fc:	dc800215 	stw	r18,8(sp)
     600:	dc400115 	stw	r17,4(sp)
     604:	dc000015 	stw	r16,0(sp)
     608:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
     60c:	28001326 	beq	r5,zero,65c <alt_up_character_lcd_shift_display+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
     610:	0140020e 	bge	zero,r5,61c <alt_up_character_lcd_shift_display+0x30>
     614:	05000704 	movi	r20,28
     618:	00000106 	br	620 <alt_up_character_lcd_shift_display+0x34>
     61c:	05000604 	movi	r20,24
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
     620:	2800010e 	bge	r5,zero,628 <alt_up_character_lcd_shift_display+0x3c>
     624:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
     628:	00bfffc4 	movi	r2,-1
     62c:	28a1883a 	add	r16,r5,r2
     630:	80c03fcc 	andi	r3,r16,255
     634:	10803fcc 	andi	r2,r2,255
     638:	18800826 	beq	r3,r2,65c <alt_up_character_lcd_shift_display+0x70>
     63c:	04bfffc4 	movi	r18,-1
     640:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
     644:	9809883a 	mov	r4,r19
     648:	a1403fcc 	andi	r5,r20,255
     64c:	00005380 	call	538 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
     650:	84a1883a 	add	r16,r16,r18
     654:	80803fcc 	andi	r2,r16,255
     658:	147ffa1e 	bne	r2,r17,644 <alt_up_character_lcd_shift_display+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
     65c:	dfc00517 	ldw	ra,20(sp)
     660:	dd000417 	ldw	r20,16(sp)
     664:	dcc00317 	ldw	r19,12(sp)
     668:	dc800217 	ldw	r18,8(sp)
     66c:	dc400117 	ldw	r17,4(sp)
     670:	dc000017 	ldw	r16,0(sp)
     674:	dec00604 	addi	sp,sp,24
     678:	f800283a 	ret

0000067c <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
     67c:	defffa04 	addi	sp,sp,-24
     680:	dfc00515 	stw	ra,20(sp)
     684:	dd000415 	stw	r20,16(sp)
     688:	dcc00315 	stw	r19,12(sp)
     68c:	dc800215 	stw	r18,8(sp)
     690:	dc400115 	stw	r17,4(sp)
     694:	dc000015 	stw	r16,0(sp)
     698:	2027883a 	mov	r19,r4
	if (x_right_shift_offset == 0) 
     69c:	28001326 	beq	r5,zero,6ec <alt_up_character_lcd_shift_cursor+0x70>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
     6a0:	0140020e 	bge	zero,r5,6ac <alt_up_character_lcd_shift_cursor+0x30>
     6a4:	05000504 	movi	r20,20
     6a8:	00000106 	br	6b0 <alt_up_character_lcd_shift_cursor+0x34>
     6ac:	05000404 	movi	r20,16
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
     6b0:	2800010e 	bge	r5,zero,6b8 <alt_up_character_lcd_shift_cursor+0x3c>
     6b4:	014bc83a 	sub	r5,zero,r5
	// do the shift
	while (num_offset-- > 0)
     6b8:	00bfffc4 	movi	r2,-1
     6bc:	28a1883a 	add	r16,r5,r2
     6c0:	80c03fcc 	andi	r3,r16,255
     6c4:	10803fcc 	andi	r2,r2,255
     6c8:	18800826 	beq	r3,r2,6ec <alt_up_character_lcd_shift_cursor+0x70>
     6cc:	04bfffc4 	movi	r18,-1
     6d0:	04403fc4 	movi	r17,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
     6d4:	9809883a 	mov	r4,r19
     6d8:	a1403fcc 	andi	r5,r20,255
     6dc:	00005380 	call	538 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
     6e0:	84a1883a 	add	r16,r16,r18
     6e4:	80803fcc 	andi	r2,r16,255
     6e8:	147ffa1e 	bne	r2,r17,6d4 <alt_up_character_lcd_shift_cursor+0x58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
     6ec:	dfc00517 	ldw	ra,20(sp)
     6f0:	dd000417 	ldw	r20,16(sp)
     6f4:	dcc00317 	ldw	r19,12(sp)
     6f8:	dc800217 	ldw	r18,8(sp)
     6fc:	dc400117 	ldw	r17,4(sp)
     700:	dc000017 	ldw	r16,0(sp)
     704:	dec00604 	addi	sp,sp,24
     708:	f800283a 	ret

0000070c <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
     70c:	defffe04 	addi	sp,sp,-8
     710:	dfc00115 	stw	ra,4(sp)
     714:	dc000015 	stw	r16,0(sp)
     718:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
     71c:	008009c4 	movi	r2,39
     720:	11400a36 	bltu	r2,r5,74c <alt_up_character_lcd_set_cursor_pos+0x40>
     724:	00800044 	movi	r2,1
     728:	11800836 	bltu	r2,r6,74c <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
     72c:	2809883a 	mov	r4,r5
     730:	300b883a 	mov	r5,r6
     734:	00004740 	call	474 <get_DDRAM_addr>
     738:	8009883a 	mov	r4,r16
     73c:	11403fcc 	andi	r5,r2,255
     740:	00005380 	call	538 <alt_up_character_lcd_send_cmd>
     744:	0005883a 	mov	r2,zero
     748:	00000106 	br	750 <alt_up_character_lcd_set_cursor_pos+0x44>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
     74c:	00bfffc4 	movi	r2,-1
}
     750:	dfc00117 	ldw	ra,4(sp)
     754:	dc000017 	ldw	r16,0(sp)
     758:	dec00204 	addi	sp,sp,8
     75c:	f800283a 	ret

00000760 <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
     760:	deffff04 	addi	sp,sp,-4
     764:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
     768:	01400034 	movhi	r5,0
     76c:	29459704 	addi	r5,r5,5724
     770:	0000aac0 	call	aac <alt_find_dev>

  return dev;
}
     774:	dfc00017 	ldw	ra,0(sp)
     778:	dec00104 	addi	sp,sp,4
     77c:	f800283a 	ret

00000780 <alt_up_rs232_check_parity>:
}

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
     780:	200495ba 	slli	r2,r4,22
}
     784:	1005d7fa 	srai	r2,r2,31
     788:	f800283a 	ret

0000078c <alt_up_rs232_open_dev>:
	}
	return count;
}

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
     78c:	deffff04 	addi	sp,sp,-4
     790:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
     794:	01400034 	movhi	r5,0
     798:	29459704 	addi	r5,r5,5724
     79c:	0000aac0 	call	aac <alt_find_dev>

  return dev;
}
     7a0:	dfc00017 	ldw	ra,0(sp)
     7a4:	dec00104 	addi	sp,sp,4
     7a8:	f800283a 	ret

000007ac <alt_up_rs232_read_data>:
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
     7ac:	defffd04 	addi	sp,sp,-12
     7b0:	dfc00215 	stw	ra,8(sp)
     7b4:	dc400115 	stw	r17,4(sp)
     7b8:	dc000015 	stw	r16,0(sp)
     7bc:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
     7c0:	20800a17 	ldw	r2,40(r4)
     7c4:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
     7c8:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
     7cc:	8009883a 	mov	r4,r16
     7d0:	00007800 	call	780 <alt_up_rs232_check_parity>
     7d4:	88800005 	stb	r2,0(r17)
     7d8:	8420000c 	andi	r16,r16,32768
     7dc:	8020d3fa 	srli	r16,r16,15
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}
     7e0:	80bfffc4 	addi	r2,r16,-1
     7e4:	dfc00217 	ldw	ra,8(sp)
     7e8:	dc400117 	ldw	r17,4(sp)
     7ec:	dc000017 	ldw	r16,0(sp)
     7f0:	dec00304 	addi	sp,sp,12
     7f4:	f800283a 	ret

000007f8 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
     7f8:	defff904 	addi	sp,sp,-28
     7fc:	dfc00615 	stw	ra,24(sp)
     800:	dd000515 	stw	r20,20(sp)
     804:	dcc00415 	stw	r19,16(sp)
     808:	dc800315 	stw	r18,12(sp)
     80c:	dc400215 	stw	r17,8(sp)
     810:	dc000115 	stw	r16,4(sp)
     814:	2821883a 	mov	r16,r5
     818:	3029883a 	mov	r20,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
     81c:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
     820:	3000021e 	bne	r6,zero,82c <alt_up_rs232_read_fd+0x34>
     824:	0025883a 	mov	r18,zero
     828:	00000a06 	br	854 <alt_up_rs232_read_fd+0x5c>
     82c:	0025883a 	mov	r18,zero
     830:	04400044 	movi	r17,1
     834:	800b883a 	mov	r5,r16
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
     838:	8461883a 	add	r16,r16,r17
     83c:	9809883a 	mov	r4,r19
     840:	d80d883a 	mov	r6,sp
     844:	00007ac0 	call	7ac <alt_up_rs232_read_data>
     848:	1000021e 	bne	r2,zero,854 <alt_up_rs232_read_fd+0x5c>
			count++;
     84c:	9465883a 	add	r18,r18,r17
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
     850:	a4bff81e 	bne	r20,r18,834 <alt_up_rs232_read_fd+0x3c>
			count++;
		else
			break;
	}
	return count;
}
     854:	9005883a 	mov	r2,r18
     858:	dfc00617 	ldw	ra,24(sp)
     85c:	dd000517 	ldw	r20,20(sp)
     860:	dcc00417 	ldw	r19,16(sp)
     864:	dc800317 	ldw	r18,12(sp)
     868:	dc400217 	ldw	r17,8(sp)
     86c:	dc000117 	ldw	r16,4(sp)
     870:	dec00704 	addi	sp,sp,28
     874:	f800283a 	ret

00000878 <alt_up_rs232_get_available_space_in_write_FIFO>:
}

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
     878:	20800a17 	ldw	r2,40(r4)
     87c:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
     880:	1004d43a 	srli	r2,r2,16
     884:	f800283a 	ret

00000888 <alt_up_rs232_write_data>:
}

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
     888:	20800a17 	ldw	r2,40(r4)
     88c:	10c00037 	ldwio	r3,0(r2)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
     890:	29403fcc 	andi	r5,r5,255
     894:	11400035 	stwio	r5,0(r2)
	return 0;
}
     898:	0005883a 	mov	r2,zero
     89c:	f800283a 	ret

000008a0 <alt_up_rs232_write_fd>:
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
     8a0:	defffb04 	addi	sp,sp,-20
     8a4:	dfc00415 	stw	ra,16(sp)
     8a8:	dcc00315 	stw	r19,12(sp)
     8ac:	dc800215 	stw	r18,8(sp)
     8b0:	dc400115 	stw	r17,4(sp)
     8b4:	dc000015 	stw	r16,0(sp)
     8b8:	2827883a 	mov	r19,r5
     8bc:	3025883a 	mov	r18,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
     8c0:	24400017 	ldw	r17,0(r4)
	int count = 0;
	while(len--)
     8c4:	3000021e 	bne	r6,zero,8d0 <alt_up_rs232_write_fd+0x30>
     8c8:	0021883a 	mov	r16,zero
     8cc:	00000806 	br	8f0 <alt_up_rs232_write_fd+0x50>
     8d0:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
     8d4:	84c5883a 	add	r2,r16,r19
     8d8:	8809883a 	mov	r4,r17
     8dc:	11400003 	ldbu	r5,0(r2)
     8e0:	00008880 	call	888 <alt_up_rs232_write_data>
     8e4:	1000021e 	bne	r2,zero,8f0 <alt_up_rs232_write_fd+0x50>
		{
			count++;
     8e8:	84000044 	addi	r16,r16,1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
     8ec:	943ff91e 	bne	r18,r16,8d4 <alt_up_rs232_write_fd+0x34>
		}
		else
			break;
	}
	return count;
}
     8f0:	8005883a 	mov	r2,r16
     8f4:	dfc00417 	ldw	ra,16(sp)
     8f8:	dcc00317 	ldw	r19,12(sp)
     8fc:	dc800217 	ldw	r18,8(sp)
     900:	dc400117 	ldw	r17,4(sp)
     904:	dc000017 	ldw	r16,0(sp)
     908:	dec00504 	addi	sp,sp,20
     90c:	f800283a 	ret

00000910 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
     910:	20800a17 	ldw	r2,40(r4)
     914:	10800104 	addi	r2,r2,4
     918:	10c00037 	ldwio	r3,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
     91c:	013fff84 	movi	r4,-2
     920:	1906703a 	and	r3,r3,r4
     924:	10c00035 	stwio	r3,0(r2)
}
     928:	f800283a 	ret

0000092c <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
     92c:	20c00a17 	ldw	r3,40(r4)
     930:	18c00104 	addi	r3,r3,4
     934:	18800037 	ldwio	r2,0(r3)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
     938:	10800054 	ori	r2,r2,1
     93c:	18800035 	stwio	r2,0(r3)
}
     940:	f800283a 	ret

00000944 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
     944:	20800a17 	ldw	r2,40(r4)
     948:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
     94c:	10bfffcc 	andi	r2,r2,65535
     950:	f800283a 	ret

00000954 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
     954:	defffd04 	addi	sp,sp,-12
     958:	dfc00215 	stw	ra,8(sp)
     95c:	dc400115 	stw	r17,4(sp)
     960:	dc000015 	stw	r16,0(sp)
     964:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
     968:	20001c16 	blt	r4,zero,9dc <close+0x88>
     96c:	20c00324 	muli	r3,r4,12
     970:	00800034 	movhi	r2,0
     974:	10843504 	addi	r2,r2,4308
     978:	1889883a 	add	r4,r3,r2

  if (fd)
     97c:	20001726 	beq	r4,zero,9dc <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     980:	20800017 	ldw	r2,0(r4)
     984:	10800417 	ldw	r2,16(r2)
     988:	10002126 	beq	r2,zero,a10 <close+0xbc>
     98c:	103ee83a 	callr	r2
     990:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     994:	8009883a 	mov	r4,r16
     998:	0000bf80 	call	bf8 <alt_release_fd>
    if (rval < 0)
     99c:	88000216 	blt	r17,zero,9a8 <close+0x54>
     9a0:	0005883a 	mov	r2,zero
     9a4:	00001d06 	br	a1c <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
     9a8:	00800034 	movhi	r2,0
     9ac:	10859a04 	addi	r2,r2,5736
     9b0:	10800017 	ldw	r2,0(r2)
     9b4:	1000031e 	bne	r2,zero,9c4 <close+0x70>
     9b8:	00c00034 	movhi	r3,0
     9bc:	18c73104 	addi	r3,r3,7364
     9c0:	00000206 	br	9cc <close+0x78>
     9c4:	103ee83a 	callr	r2
     9c8:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
     9cc:	0445c83a 	sub	r2,zero,r17
     9d0:	18800015 	stw	r2,0(r3)
     9d4:	00bfffc4 	movi	r2,-1
     9d8:	00001006 	br	a1c <close+0xc8>
     9dc:	00800034 	movhi	r2,0
     9e0:	10859a04 	addi	r2,r2,5736
     9e4:	10800017 	ldw	r2,0(r2)
     9e8:	1000031e 	bne	r2,zero,9f8 <close+0xa4>
     9ec:	00c00034 	movhi	r3,0
     9f0:	18c73104 	addi	r3,r3,7364
     9f4:	00000206 	br	a00 <close+0xac>
     9f8:	103ee83a 	callr	r2
     9fc:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
     a00:	00801444 	movi	r2,81
     a04:	18800015 	stw	r2,0(r3)
     a08:	00bfffc4 	movi	r2,-1
     a0c:	00000306 	br	a1c <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     a10:	8009883a 	mov	r4,r16
     a14:	0000bf80 	call	bf8 <alt_release_fd>
     a18:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
     a1c:	dfc00217 	ldw	ra,8(sp)
     a20:	dc400117 	ldw	r17,4(sp)
     a24:	dc000017 	ldw	r16,0(sp)
     a28:	dec00304 	addi	sp,sp,12
     a2c:	f800283a 	ret

00000a30 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     a30:	f800283a 	ret

00000a34 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
     a34:	3005883a 	mov	r2,r6
     a38:	f800283a 	ret

00000a3c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
     a3c:	deffff04 	addi	sp,sp,-4
     a40:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
     a44:	20000226 	beq	r4,zero,a50 <alt_dev_llist_insert+0x14>
     a48:	20800217 	ldw	r2,8(r4)
     a4c:	10000d1e 	bne	r2,zero,a84 <alt_dev_llist_insert+0x48>
     a50:	00800034 	movhi	r2,0
     a54:	10859a04 	addi	r2,r2,5736
     a58:	10800017 	ldw	r2,0(r2)
     a5c:	1000031e 	bne	r2,zero,a6c <alt_dev_llist_insert+0x30>
     a60:	00c00034 	movhi	r3,0
     a64:	18c73104 	addi	r3,r3,7364
     a68:	00000206 	br	a74 <alt_dev_llist_insert+0x38>
     a6c:	103ee83a 	callr	r2
     a70:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
     a74:	00800584 	movi	r2,22
     a78:	18800015 	stw	r2,0(r3)
     a7c:	00bffa84 	movi	r2,-22
     a80:	00000706 	br	aa0 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
     a84:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
     a88:	28800017 	ldw	r2,0(r5)
     a8c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
     a90:	28800017 	ldw	r2,0(r5)
     a94:	11000115 	stw	r4,4(r2)
  list->next           = entry;
     a98:	29000015 	stw	r4,0(r5)
     a9c:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
     aa0:	dfc00017 	ldw	ra,0(sp)
     aa4:	dec00104 	addi	sp,sp,4
     aa8:	f800283a 	ret

00000aac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
     aac:	defffb04 	addi	sp,sp,-20
     ab0:	dfc00415 	stw	ra,16(sp)
     ab4:	dcc00315 	stw	r19,12(sp)
     ab8:	dc800215 	stw	r18,8(sp)
     abc:	dc400115 	stw	r17,4(sp)
     ac0:	dc000015 	stw	r16,0(sp)
     ac4:	2027883a 	mov	r19,r4
     ac8:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
     acc:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
     ad0:	0000dec0 	call	dec <strlen>
     ad4:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
     ad8:	8c000726 	beq	r17,r16,af8 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
     adc:	89000217 	ldw	r4,8(r17)
     ae0:	980b883a 	mov	r5,r19
     ae4:	900d883a 	mov	r6,r18
     ae8:	0000d780 	call	d78 <memcmp>
     aec:	10000326 	beq	r2,zero,afc <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
     af0:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
     af4:	847ff91e 	bne	r16,r17,adc <alt_find_dev+0x30>
     af8:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
     afc:	8805883a 	mov	r2,r17
     b00:	dfc00417 	ldw	ra,16(sp)
     b04:	dcc00317 	ldw	r19,12(sp)
     b08:	dc800217 	ldw	r18,8(sp)
     b0c:	dc400117 	ldw	r17,4(sp)
     b10:	dc000017 	ldw	r16,0(sp)
     b14:	dec00504 	addi	sp,sp,20
     b18:	f800283a 	ret

00000b1c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
     b1c:	deffff04 	addi	sp,sp,-4
     b20:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
     b24:	0009883a 	mov	r4,zero
     b28:	01440004 	movi	r5,4096
     b2c:	0000d040 	call	d04 <alt_icache_flush>
#endif
}
     b30:	dfc00017 	ldw	ra,0(sp)
     b34:	dec00104 	addi	sp,sp,4
     b38:	f800283a 	ret

00000b3c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
     b3c:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
     b40:	008007c4 	movi	r2,31
     b44:	1100022e 	bgeu	r2,r4,b50 <alt_irq_register+0x14>
     b48:	00bffa84 	movi	r2,-22
     b4c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     b50:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     b54:	013fff84 	movi	r4,-2
     b58:	4104703a 	and	r2,r8,r4
     b5c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
     b60:	380490fa 	slli	r2,r7,3
     b64:	00c00034 	movhi	r3,0
     b68:	18c73204 	addi	r3,r3,7368
     b6c:	10c5883a 	add	r2,r2,r3
     b70:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
     b74:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
     b78:	30000e26 	beq	r6,zero,bb4 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     b7c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     b80:	2904703a 	and	r2,r5,r4
     b84:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
     b88:	00c00034 	movhi	r3,0
     b8c:	18c72e04 	addi	r3,r3,7352
     b90:	19000017 	ldw	r4,0(r3)
     b94:	00800044 	movi	r2,1
     b98:	11c4983a 	sll	r2,r2,r7
     b9c:	1104b03a 	or	r2,r2,r4
     ba0:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     ba4:	18800017 	ldw	r2,0(r3)
     ba8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     bac:	2801703a 	wrctl	status,r5
     bb0:	00000e06 	br	bec <alt_irq_register+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     bb4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     bb8:	00bfff84 	movi	r2,-2
     bbc:	2884703a 	and	r2,r5,r2
     bc0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
     bc4:	00c00034 	movhi	r3,0
     bc8:	18c72e04 	addi	r3,r3,7352
     bcc:	19000017 	ldw	r4,0(r3)
     bd0:	00bfff84 	movi	r2,-2
     bd4:	11c4183a 	rol	r2,r2,r7
     bd8:	1104703a 	and	r2,r2,r4
     bdc:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     be0:	18800017 	ldw	r2,0(r3)
     be4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     be8:	2801703a 	wrctl	status,r5
     bec:	4001703a 	wrctl	status,r8
     bf0:	0005883a 	mov	r2,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
     bf4:	f800283a 	ret

00000bf8 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
     bf8:	00800084 	movi	r2,2
     bfc:	1100060e 	bge	r2,r4,c18 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
     c00:	20800324 	muli	r2,r4,12
     c04:	00c00034 	movhi	r3,0
     c08:	18c43504 	addi	r3,r3,4308
     c0c:	10c5883a 	add	r2,r2,r3
     c10:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
     c14:	10000015 	stw	zero,0(r2)
     c18:	f800283a 	ret

00000c1c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     c1c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     c20:	00bfff84 	movi	r2,-2
     c24:	2884703a 	and	r2,r5,r2
     c28:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
     c2c:	20c00017 	ldw	r3,0(r4)
     c30:	20800117 	ldw	r2,4(r4)
     c34:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
     c38:	20800117 	ldw	r2,4(r4)
     c3c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
     c40:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
     c44:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     c48:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
     c4c:	f800283a 	ret

00000c50 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
     c50:	defffd04 	addi	sp,sp,-12
     c54:	dfc00215 	stw	ra,8(sp)
     c58:	dc400115 	stw	r17,4(sp)
     c5c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
     c60:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
     c64:	d0a19b17 	ldw	r2,-31124(gp)
     c68:	10800044 	addi	r2,r2,1
     c6c:	d0a19b15 	stw	r2,-31124(gp)
     c70:	00001b06 	br	ce0 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
     c74:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
     c78:	80800403 	ldbu	r2,16(r16)
     c7c:	10000326 	beq	r2,zero,c8c <alt_tick+0x3c>
     c80:	d0a19b17 	ldw	r2,-31124(gp)
     c84:	1000011e 	bne	r2,zero,c8c <alt_tick+0x3c>
    {
      alarm->rollover = 0;
     c88:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
     c8c:	d0e19b17 	ldw	r3,-31124(gp)
     c90:	80800217 	ldw	r2,8(r16)
     c94:	18801136 	bltu	r3,r2,cdc <alt_tick+0x8c>
     c98:	80800403 	ldbu	r2,16(r16)
     c9c:	10000f1e 	bne	r2,zero,cdc <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
     ca0:	80800317 	ldw	r2,12(r16)
     ca4:	81000517 	ldw	r4,20(r16)
     ca8:	103ee83a 	callr	r2
     cac:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
     cb0:	1000031e 	bne	r2,zero,cc0 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
     cb4:	8009883a 	mov	r4,r16
     cb8:	0000c1c0 	call	c1c <alt_alarm_stop>
     cbc:	00000706 	br	cdc <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
     cc0:	80800217 	ldw	r2,8(r16)
     cc4:	1885883a 	add	r2,r3,r2
     cc8:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
     ccc:	d0e19b17 	ldw	r3,-31124(gp)
     cd0:	10c0022e 	bgeu	r2,r3,cdc <alt_tick+0x8c>
        {
          alarm->rollover = 1;
     cd4:	00800044 	movi	r2,1
     cd8:	80800405 	stb	r2,16(r16)
     cdc:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
     ce0:	d0a00704 	addi	r2,gp,-32740
     ce4:	80bfe31e 	bne	r16,r2,c74 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
     ce8:	dfc00217 	ldw	ra,8(sp)
     cec:	dc400117 	ldw	r17,4(sp)
     cf0:	dc000017 	ldw	r16,0(sp)
     cf4:	dec00304 	addi	sp,sp,12
     cf8:	f800283a 	ret

00000cfc <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
     cfc:	000170fa 	wrctl	ienable,zero
}
     d00:	f800283a 	ret

00000d04 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
     d04:	2007883a 	mov	r3,r4
     d08:	00840004 	movi	r2,4096
     d0c:	1140012e 	bgeu	r2,r5,d14 <alt_icache_flush+0x10>
     d10:	100b883a 	mov	r5,r2
     d14:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
     d18:	1940042e 	bgeu	r3,r5,d2c <alt_icache_flush+0x28>
     d1c:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
     d20:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
     d24:	1887883a 	add	r3,r3,r2
     d28:	197ffd36 	bltu	r3,r5,d20 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
     d2c:	208007cc 	andi	r2,r4,31
     d30:	10000126 	beq	r2,zero,d38 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
     d34:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
     d38:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
     d3c:	f800283a 	ret

00000d40 <exit>:
     d40:	defffe04 	addi	sp,sp,-8
     d44:	000b883a 	mov	r5,zero
     d48:	dc000015 	stw	r16,0(sp)
     d4c:	dfc00115 	stw	ra,4(sp)
     d50:	2021883a 	mov	r16,r4
     d54:	0000e640 	call	e64 <__call_exitprocs>
     d58:	00800034 	movhi	r2,0
     d5c:	10859f04 	addi	r2,r2,5756
     d60:	11000017 	ldw	r4,0(r2)
     d64:	20800f17 	ldw	r2,60(r4)
     d68:	10000126 	beq	r2,zero,d70 <exit+0x30>
     d6c:	103ee83a 	callr	r2
     d70:	8009883a 	mov	r4,r16
     d74:	00010140 	call	1014 <_exit>

00000d78 <memcmp>:
     d78:	00c000c4 	movi	r3,3
     d7c:	1980032e 	bgeu	r3,r6,d8c <memcmp+0x14>
     d80:	2144b03a 	or	r2,r4,r5
     d84:	10c4703a 	and	r2,r2,r3
     d88:	10000f26 	beq	r2,zero,dc8 <memcmp+0x50>
     d8c:	31ffffc4 	addi	r7,r6,-1
     d90:	3000061e 	bne	r6,zero,dac <memcmp+0x34>
     d94:	00000a06 	br	dc0 <memcmp+0x48>
     d98:	39ffffc4 	addi	r7,r7,-1
     d9c:	00bfffc4 	movi	r2,-1
     da0:	21000044 	addi	r4,r4,1
     da4:	29400044 	addi	r5,r5,1
     da8:	38800526 	beq	r7,r2,dc0 <memcmp+0x48>
     dac:	20c00003 	ldbu	r3,0(r4)
     db0:	28800003 	ldbu	r2,0(r5)
     db4:	18bff826 	beq	r3,r2,d98 <memcmp+0x20>
     db8:	1885c83a 	sub	r2,r3,r2
     dbc:	f800283a 	ret
     dc0:	0005883a 	mov	r2,zero
     dc4:	f800283a 	ret
     dc8:	180f883a 	mov	r7,r3
     dcc:	20c00017 	ldw	r3,0(r4)
     dd0:	28800017 	ldw	r2,0(r5)
     dd4:	18bfed1e 	bne	r3,r2,d8c <memcmp+0x14>
     dd8:	31bfff04 	addi	r6,r6,-4
     ddc:	21000104 	addi	r4,r4,4
     de0:	29400104 	addi	r5,r5,4
     de4:	39bff936 	bltu	r7,r6,dcc <memcmp+0x54>
     de8:	003fe806 	br	d8c <memcmp+0x14>

00000dec <strlen>:
     dec:	208000cc 	andi	r2,r4,3
     df0:	2011883a 	mov	r8,r4
     df4:	1000161e 	bne	r2,zero,e50 <strlen+0x64>
     df8:	20c00017 	ldw	r3,0(r4)
     dfc:	017fbff4 	movhi	r5,65279
     e00:	297fbfc4 	addi	r5,r5,-257
     e04:	01e02074 	movhi	r7,32897
     e08:	39e02004 	addi	r7,r7,-32640
     e0c:	1945883a 	add	r2,r3,r5
     e10:	11c4703a 	and	r2,r2,r7
     e14:	00c6303a 	nor	r3,zero,r3
     e18:	1886703a 	and	r3,r3,r2
     e1c:	18000c1e 	bne	r3,zero,e50 <strlen+0x64>
     e20:	280d883a 	mov	r6,r5
     e24:	380b883a 	mov	r5,r7
     e28:	21000104 	addi	r4,r4,4
     e2c:	20800017 	ldw	r2,0(r4)
     e30:	1187883a 	add	r3,r2,r6
     e34:	1946703a 	and	r3,r3,r5
     e38:	0084303a 	nor	r2,zero,r2
     e3c:	10c4703a 	and	r2,r2,r3
     e40:	103ff926 	beq	r2,zero,e28 <strlen+0x3c>
     e44:	20800007 	ldb	r2,0(r4)
     e48:	10000326 	beq	r2,zero,e58 <strlen+0x6c>
     e4c:	21000044 	addi	r4,r4,1
     e50:	20800007 	ldb	r2,0(r4)
     e54:	103ffd1e 	bne	r2,zero,e4c <strlen+0x60>
     e58:	2205c83a 	sub	r2,r4,r8
     e5c:	f800283a 	ret

00000e60 <register_fini>:
     e60:	f800283a 	ret

00000e64 <__call_exitprocs>:
     e64:	00800034 	movhi	r2,0
     e68:	10859f04 	addi	r2,r2,5756
     e6c:	10800017 	ldw	r2,0(r2)
     e70:	defff304 	addi	sp,sp,-52
     e74:	df000b15 	stw	fp,44(sp)
     e78:	d8800115 	stw	r2,4(sp)
     e7c:	00800034 	movhi	r2,0
     e80:	10800004 	addi	r2,r2,0
     e84:	1005003a 	cmpeq	r2,r2,zero
     e88:	d8800215 	stw	r2,8(sp)
     e8c:	d8800117 	ldw	r2,4(sp)
     e90:	dd400815 	stw	r21,32(sp)
     e94:	dd000715 	stw	r20,28(sp)
     e98:	10805204 	addi	r2,r2,328
     e9c:	dfc00c15 	stw	ra,48(sp)
     ea0:	ddc00a15 	stw	r23,40(sp)
     ea4:	dd800915 	stw	r22,36(sp)
     ea8:	dcc00615 	stw	r19,24(sp)
     eac:	dc800515 	stw	r18,20(sp)
     eb0:	dc400415 	stw	r17,16(sp)
     eb4:	dc000315 	stw	r16,12(sp)
     eb8:	282b883a 	mov	r21,r5
     ebc:	2039883a 	mov	fp,r4
     ec0:	d8800015 	stw	r2,0(sp)
     ec4:	2829003a 	cmpeq	r20,r5,zero
     ec8:	d8800117 	ldw	r2,4(sp)
     ecc:	14405217 	ldw	r17,328(r2)
     ed0:	88001026 	beq	r17,zero,f14 <__call_exitprocs+0xb0>
     ed4:	ddc00017 	ldw	r23,0(sp)
     ed8:	88800117 	ldw	r2,4(r17)
     edc:	8c802204 	addi	r18,r17,136
     ee0:	143fffc4 	addi	r16,r2,-1
     ee4:	80000916 	blt	r16,zero,f0c <__call_exitprocs+0xa8>
     ee8:	05bfffc4 	movi	r22,-1
     eec:	a000151e 	bne	r20,zero,f44 <__call_exitprocs+0xe0>
     ef0:	8409883a 	add	r4,r16,r16
     ef4:	2105883a 	add	r2,r4,r4
     ef8:	1485883a 	add	r2,r2,r18
     efc:	10c02017 	ldw	r3,128(r2)
     f00:	a8c01126 	beq	r21,r3,f48 <__call_exitprocs+0xe4>
     f04:	843fffc4 	addi	r16,r16,-1
     f08:	85bff81e 	bne	r16,r22,eec <__call_exitprocs+0x88>
     f0c:	d8800217 	ldw	r2,8(sp)
     f10:	10003126 	beq	r2,zero,fd8 <__call_exitprocs+0x174>
     f14:	dfc00c17 	ldw	ra,48(sp)
     f18:	df000b17 	ldw	fp,44(sp)
     f1c:	ddc00a17 	ldw	r23,40(sp)
     f20:	dd800917 	ldw	r22,36(sp)
     f24:	dd400817 	ldw	r21,32(sp)
     f28:	dd000717 	ldw	r20,28(sp)
     f2c:	dcc00617 	ldw	r19,24(sp)
     f30:	dc800517 	ldw	r18,20(sp)
     f34:	dc400417 	ldw	r17,16(sp)
     f38:	dc000317 	ldw	r16,12(sp)
     f3c:	dec00d04 	addi	sp,sp,52
     f40:	f800283a 	ret
     f44:	8409883a 	add	r4,r16,r16
     f48:	88c00117 	ldw	r3,4(r17)
     f4c:	2105883a 	add	r2,r4,r4
     f50:	1445883a 	add	r2,r2,r17
     f54:	18ffffc4 	addi	r3,r3,-1
     f58:	11800217 	ldw	r6,8(r2)
     f5c:	1c001526 	beq	r3,r16,fb4 <__call_exitprocs+0x150>
     f60:	10000215 	stw	zero,8(r2)
     f64:	303fe726 	beq	r6,zero,f04 <__call_exitprocs+0xa0>
     f68:	00c00044 	movi	r3,1
     f6c:	1c06983a 	sll	r3,r3,r16
     f70:	90804017 	ldw	r2,256(r18)
     f74:	8cc00117 	ldw	r19,4(r17)
     f78:	1884703a 	and	r2,r3,r2
     f7c:	10001426 	beq	r2,zero,fd0 <__call_exitprocs+0x16c>
     f80:	90804117 	ldw	r2,260(r18)
     f84:	1884703a 	and	r2,r3,r2
     f88:	10000c1e 	bne	r2,zero,fbc <__call_exitprocs+0x158>
     f8c:	2105883a 	add	r2,r4,r4
     f90:	1485883a 	add	r2,r2,r18
     f94:	11400017 	ldw	r5,0(r2)
     f98:	e009883a 	mov	r4,fp
     f9c:	303ee83a 	callr	r6
     fa0:	88800117 	ldw	r2,4(r17)
     fa4:	98bfc81e 	bne	r19,r2,ec8 <__call_exitprocs+0x64>
     fa8:	b8800017 	ldw	r2,0(r23)
     fac:	147fd526 	beq	r2,r17,f04 <__call_exitprocs+0xa0>
     fb0:	003fc506 	br	ec8 <__call_exitprocs+0x64>
     fb4:	8c000115 	stw	r16,4(r17)
     fb8:	003fea06 	br	f64 <__call_exitprocs+0x100>
     fbc:	2105883a 	add	r2,r4,r4
     fc0:	1485883a 	add	r2,r2,r18
     fc4:	11000017 	ldw	r4,0(r2)
     fc8:	303ee83a 	callr	r6
     fcc:	003ff406 	br	fa0 <__call_exitprocs+0x13c>
     fd0:	303ee83a 	callr	r6
     fd4:	003ff206 	br	fa0 <__call_exitprocs+0x13c>
     fd8:	88800117 	ldw	r2,4(r17)
     fdc:	1000081e 	bne	r2,zero,1000 <__call_exitprocs+0x19c>
     fe0:	89000017 	ldw	r4,0(r17)
     fe4:	20000726 	beq	r4,zero,1004 <__call_exitprocs+0x1a0>
     fe8:	b9000015 	stw	r4,0(r23)
     fec:	8809883a 	mov	r4,r17
     ff0:	00000000 	call	0 <__alt_mem_RAM>
     ff4:	bc400017 	ldw	r17,0(r23)
     ff8:	883fb71e 	bne	r17,zero,ed8 <__call_exitprocs+0x74>
     ffc:	003fc506 	br	f14 <__call_exitprocs+0xb0>
    1000:	89000017 	ldw	r4,0(r17)
    1004:	882f883a 	mov	r23,r17
    1008:	2023883a 	mov	r17,r4
    100c:	883fb21e 	bne	r17,zero,ed8 <__call_exitprocs+0x74>
    1010:	003fc006 	br	f14 <__call_exitprocs+0xb0>

00001014 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    1014:	20000226 	beq	r4,zero,1020 <_exit+0xc>
    ALT_SIM_FAIL();
    1018:	002af070 	cmpltui	zero,zero,43969
    101c:	00000106 	br	1024 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    1020:	002af0b0 	cmpltui	zero,zero,43970
    1024:	003fff06 	br	1024 <_exit+0x10>
    1028:	00000e60 	cmpeqi	zero,zero,57
